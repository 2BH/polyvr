<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="particles1" name_space="Scene">
  <Objects>
    <Object name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="15.4142 8.82174 1.0122" at="5.5 1.8166 1.03452" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="0" accept_root="1" near="0.1" far="250" aspect="1" fov="1.0472">
          <Object name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" occlusion_culling="0" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="fluid_fp" name_space="__script__" type="GLSL" mobile="">
      <core>
#version 120

void main( void ) {
   gl_FragColor = vec4(0.0,0.0,0.0,1.0);
}
</core>
    </Script>
    <Script name_suffix="0" base_name="fluid_gp" name_space="__script__" type="GLSL" mobile="">
      <core>
	pass
</core>
    </Script>
    <Script name_suffix="0" base_name="fluid_vp" name_space="__script__" type="GLSL" mobile="mobile">
      <core>
#version 120

varying vec4 vertPos;
varying vec3 vertNorm;

void main(void)
{
    vertPos        = gl_ModelViewMatrix * gl_Vertex;
    vertNorm       = gl_NormalMatrix    * gl_Normal;

    gl_TexCoord[0] = gl_MultiTexCoord0;
    gl_FrontColor  = gl_Color;
    gl_Position    = ftransform();
}
</core>
    </Script>
    <Script name_suffix="0" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	r = VR.getRoot().find('Headlight')
	if hasattr(VR, 'test'):
		print 'destroy'
		VR.test.destroy()
	VR.test = VR.Object('test')
	r.addChild(VR.test)
	
	def initGlassMaterial():
		m = VR.Material('glass')
		m.setTransparency(0)
		return m
		
	def initTransparentMaterial():
		m = VR.Material('transparent')
		m.setTransparency(1)
		return m
	
	def initFluidMaterial():
		m = VR.Material('fluid')
		#m.setVertexProgram('fluid_vp')
		#m.setFragmentProgram('fluid_fp')
		m.setPointSize(10)
		m.setAmbient([1,1-0.5,1])
		return m
		
	def initParticleMaterial():
		m = VR.Material('particle')
		#m.setVertexProgram('fluid_vp')
		#m.setFragmentProgram('particle_fp')
		m.setPointSize(10)
		m.setAmbient([1-0.1,1,1])
		return m
	
	def doParticles(x,y,z):
		p = VR.Particles()
		p.setMaterial( initFluidMaterial() )
		# test setter
		p.setRadius(0.05)
		p.setMass(1)
		num = p.spawnCuboid(-2,3,-0.5, "size",x,y,z)
		print num
		VR.test.addChild(p)
		
	def doFluids(x,y,z):
		p = VR.Fluids()
		p.setSimType('XSPH')
		p.setMaterial( initFluidMaterial() )
		# test setter
		p.setRadius(0.05)
		p.setSphRadius(1.0)
		p.setMass(1)
		num = p.spawnCuboid(-2,3,2, "size",x,y,z)
		print num
		VR.test.addChild(p)
		
	def doFountain(x,y,z):
		brunnen = VR.loadGeometry('ressources/misc/brunnen2.dae')
		#brunnen = VR.Geometry('brunnen')
		#brunnen.setPrimitive('Box 1 1 0.5 1 1 1')
		brunnen.setPose([x,y,z], [0,-1,0], [0,0,1])
		#brunnen.setScale(1,1,1)
		brunnen.setCollisionMargin(0.15)
		VR.test.addChild(brunnen)
		brunnen.physicalize(1,0,1)
	
	def doGround():
		ground = VR.Geometry('ground')
		ground.setPrimitive('Box 10 1 10 1 1 1')
		VR.test.addChild(ground)
		ground.translate(0,-1,0)
		ground.setCollisionMargin(0.01)
		ground.physicalize(1,0,0)
		
	def doBasicTest():
		hill = VR.Geometry('hill')
		div = VR.Geometry('div')
		wallL = VR.Geometry('wallL')
		wallR = VR.Geometry('wallR')
		wallF = VR.Geometry('wallF')
		
		hill.setPrimitive('Box 10 1 10 1 1 1')
		div.setPrimitive('Box 10 10 0.3 1 1 1')
		wallL.setPrimitive('Box 10 10 1 1 1 1')
		wallR.setPrimitive('Box 10 10 1 1 1 1')
		wallF.setPrimitive('Box 1 10 10 1 1 1')
		
		hill.setPose([1,1,1], [0,0,1],[1,2,0])
		div.translate(0,0,1)
		wallL.translate(0,0,-2)
		wallR.translate(0,0,4)
		wallF.translate(5,0,1)
		
		hill.setMaterial(initTransparentMaterial())
		div.setMaterial(initTransparentMaterial())
		wallL.setMaterial(initTransparentMaterial())
		wallR.setMaterial(initTransparentMaterial())
		wallF.setMaterial(initGlassMaterial())
		
		VR.test.addChild(hill)
		VR.test.addChild(div)
		VR.test.addChild(wallL)
		VR.test.addChild(wallR)
		VR.test.addChild(wallF)
		
		hill.physicalize(1,0,0)
		div.physicalize(1,0,0)
		wallL.physicalize(1,0,0)
		wallR.physicalize(1,0,0)
		wallF.physicalize(1,0,0)
		
	def doBasicPillar(x,y,z):
		p = VR.Geometry('pillar')
		p.setPrimitive('Cylinder 6 0.35 16')
		p.translate(x,y,z)
		p.setMaterial(initTransparentMaterial())
		VR.test.addChild(p)
		p.physicalize(1,0,0)
		
	def doArcadeTest():
		for i in range(1,10):
			doBasicPillar(0.2*i-1,-0.1*i,6-i)
		for i in range(1,10):
			doBasicPillar(0.2*i+1,-0.1*i-1,5.5-i)
		
		
		
	#doFountain(-2,1,0)
	#doFountain(2,1,0)
	#doFountain(-1,2.5,2)
	#doGround()
	doBasicTest()
	doArcadeTest()
	x = 3
	y = 10
	z = 1
	doParticles(x,y,z)
	doFluids(x,y,z)
	
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="0" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="0" name_suffix="1" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="particle_fp" name_space="__script__" type="GLSL" mobile="">
      <core>
#version 120

void main( void ) {
   gl_FragColor = vec4(0.5,0.0,0.0,1.0);
}
</core>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="0.6 0.6 0.6" format=".png" path="" type="0"/>
  <Navigation active="Orbit"/>
  <Materials/>
</Scene>
