<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="nature" name_space="Scene" loading_time="241">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" persistency="666" pickable="0" type="Object" unique="1" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="Headlight" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" persistency="666" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1" type="Light" unique="1" visible="1">
        <Object accept_root="1" aspect="1" at="0 1 0" at_dir="0" base_name="Default" far="250" fov="1.0472" from="-0.636349 0.993104 0.462064" name_space="__global__" name_suffix="0" near="0.01" persistency="666" pickable="0" scale="1 1 1" type="Camera" unique="1" up="0 1 0" visible="1">
          <Object at="0 0 -1" at_dir="1" base_name="Headlight_beacon" from="0 0 0" light="Headlight" name_space="__global__" name_suffix="0" persistency="666" pickable="0" scale="1 1 1" type="LightBeacon" unique="1" up="0 1 0" visible="1">
            <constraint active="1" cR="0 1 0" cR_local="0" cR_mode="0" cT="0 1 0" cT_local="0" cT_mode="0" persistency="666"/>
          </Object>
          <constraint active="1" cR="0 1 0" cR_local="0" cR_mode="0" cT="0 1 0" cT_local="0" cT_mode="0" persistency="666"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" hmdd="0" occlusion_culling="0" persistency="666" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts persistency="666">
    <Script base_name="init" name_space="__script__" name_suffix="0" persistency="666" unique="1" type="Python" mobile="">
      <core>
	import VR
	from random import random
	
	r = VR.getRoot().find('Headlight')
	
	if hasattr(VR, 'tree'): VR.tree.destroy()
	VR.tree = VR.Tree()
	r.addChild(VR.tree)
	
	#VR.tree.setup(6,5,int(random()*100), 0.2,0.5,0.78,0.45, 0.2,0.4,0.2,0.2)
	VR.tree.setup(3,3,int(random()*100), 0.2,0.5,0.78,0.45, 0.2,0.4,0.2,0.2)
	
	m = VR.tree.getMaterial()
	m.setVertexProgram('shrd_vert')
	m.setFragmentProgram('shrd_frag')
	m.setGeometryProgram('shrd_geo')
	m.enableShaderParameter('OSGCameraPosition')
	m.enableShaderParameter('OSGModelViewProjectionMatrix')
	m.enableShaderParameter('OSGNormalMatrix')
	
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	
	tg.add('Perlin', 1, [0.7,0.5,0.3], [1,0.9,0.7])
	tg.add('Perlin', 1.0/4, [1,0.9,0.7], [0.7,0.5,0.3])
	m.setTexture(tg.compose(0))
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="105" name_suffix="0" base_name="trigger" name_space="__global__"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="7" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script base_name="shrd_frag" name_space="__script__" name_suffix="0" persistency="666" unique="1" type="GLSL" mobile="">
      <core>
#version 400 compatibility

vec4 fvAmbient  = vec4(0.36, 0.36, 0.36, 1.0);&#13;
//vec4 fvSpecular = vec4(0.7,  0.7,  0.7,  1.0);&#13;
vec4 fvSpecular = vec4(0.3,  0.3,  0.3,  1.0);&#13;
vec4 fvDiffuse  = vec4(0.5,  0.5,  0.5,  1.0);&#13;
//float fSpecularPower = 25.0;&#13;
float fSpecularPower = 10.0;&#13;
&#13;
uniform sampler3D tex;&#13;

in float cylR1;
in float cylR2;
in vec3 cylDir;
in vec3 cylP0;
in vec3 cylP1;
in vec3 cylN0;
in vec3 cylN1;
&#13;
in vec3 ViewDirection;&#13;
in vec3 fvObjectPosition;
in vec3 MVPos;
in vec3 Normal;
in vec3 TexCoord;

vec3 norm;

vec2 solveEq(float A, float B, float C) {
   	float D = B*B-4.0*A*C;
   	if (D &lt; 0.0) discard; // no solution/intersection
   	D = sqrt(D);
   	float t1 = (-B+D)/A*0.5;
   	float t2 = (-B-D)/A*0.5;
   	//if (t1 &lt; 0) return t2;
   	//if (t2 &lt; 0) return t1;
   	return vec2(t1, t2);
}

vec3 raycastCylinder(vec3 rayStart, vec3 rayDir) {
   	vec3 rayDRad = rayDir - dot(rayDir, cylDir)*cylDir;
   	vec3 rayPRad = rayStart-cylP0 - dot(rayStart-cylP0, cylDir)*cylDir;
   	
   	float A = dot(rayDRad,rayDRad);
   	float B = 2.0*dot(rayDRad, rayPRad);
   	float C = dot(rayPRad, rayPRad) - cylR1*cylR1;
   	vec2 t = solveEq(A, B, C);
   	
   	vec3 pC = rayStart + max(t[0],t[1])*rayDir;
   	if ( dot(cylN0, pC-cylP0) &lt; 0.0 ) discard;
   	if ( dot(cylN1, pC-cylP1) &gt; 0.0 ) discard;
   	
   	norm = pC - cylP0 - dot(pC - cylP0, cylDir)*cylDir;
   	norm = normalize(norm);
   	return pC;
}

vec3 raycastCone(vec3 rayStart, vec3 rayDir) {
   	float H = distance(cylP0, cylP1);
   	float H2 = H*H;
   	float dR = cylR1-cylR2;
   	float dR2 = dR*dR;
   	
   	if (abs(dR) &lt; 0.0001) return raycastCylinder(rayStart, rayDir);
   	
   	vec3 cylPa = cylP0 + cylDir * cylR1*H/dR;
   	float vrvc = dot(rayDir, cylDir);
   	float dpvc = dot(rayStart-cylPa, cylDir);
   	vec3 rayDRad = rayDir - vrvc*cylDir;
   	vec3 rayPRad = rayStart-cylPa - dpvc*cylDir;
   	float cos2a = H2 / (H2 + dR2);
   	float sin2a = 1.0 - cos2a;
   	
   	float A = cos2a * dot(rayDRad,rayDRad) - sin2a * vrvc * vrvc;
   	float B = 2.0 * (cos2a * dot(rayDRad, rayPRad) - sin2a * vrvc * dpvc);
   	float C = cos2a * dot(rayPRad, rayPRad) - sin2a * dpvc * dpvc;
   	vec2 t = solveEq(A, B, C);
   	
   	
   	vec3 pC = rayStart + max(t[0], t[1])*rayDir;
   	if ( dot(cylN0, pC-cylP0) &lt; 0.0 ) discard;
   	if ( dot(cylN1, pC-cylP1) &gt; 0.0 ) discard;
   	
   	norm = pC - cylP0 - dot(pC - cylP0, cylDir)*cylDir;
   	norm = normalize(norm);
   	return pC;
}
&#13;
void main( void ) {
	norm = Normal;
   	vec3 rayStart = MVPos;
   	vec3 rayDir = -MVPos;
   	rayDir = normalize(rayDir);
   	
	vec3 I = fvObjectPosition;
	I = raycastCone(rayStart, rayDir);&#13;

   vec3  fvNormal         = normalize( norm );&#13;
   vec3  fvLightDirection = normalize( gl_LightSource[0].position.xyz - I.xyz);
   float fNDotL           = dot( fvNormal, fvLightDirection );&#13;
&#13;
   vec3  fvReflection     = normalize( ( ( 2.0 * fvNormal ) * fNDotL ) - fvLightDirection );&#13;
   vec3  fvViewDirection  = normalize( ViewDirection );&#13;
   float fRDotV           = max( 0.0, dot( fvReflection, fvViewDirection ) );&#13;
&#13;
   vec4  fvBaseColor      = texture(tex, TexCoord*10);&#13;
&#13;
   vec4  fvTotalAmbient   = fvAmbient * fvBaseColor;&#13;
   vec4  fvTotalDiffuse   = fvDiffuse * fNDotL * fvBaseColor;&#13;
   vec4  fvTotalSpecular  = fvSpecular * ( pow( fRDotV, fSpecularPower ) );&#13;
&#13;
   gl_FragColor = fvTotalAmbient + fvTotalDiffuse + fvTotalSpecular;&#13;
   //gl_FragColor = vec4(fvObjectPosition.xyz, 1.0);&#13;
   //gl_FragColor = vec4(10*cylR1, 10*cylR2, 0.0, 1.0);
   //gl_FragColor = vec4(abs(cylDir.xyz), 1.0);
   //gl_FragColor = vec4(abs(cylP0.xyz), 1.0);
   //gl_FragColor = vec4(abs(I.xyz), 1.0);&#13;
}




</core>
    </Script>
    <Script base_name="shrd_geo" name_space="__script__" name_suffix="0" persistency="666" unique="1" type="GLSL" mobile="">
      <core>
//----------------------------------------------------------------------------------------------MAIN--GP&#13;
#version 150&#13;
#extension GL_EXT_geometry_shader4 : enable&#13;
layout (lines) in;&#13;
layout (triangle_strip, max_vertices = 24) out;&#13;
in vec2 tc[];&#13;
in vec3 vert_normal[];&#13;
&#13;
//Phong&#13;
out vec3 ViewDirection;&#13;
out vec3 fvObjectPosition;
out vec3 MVPos;
out vec3 Normal;
out vec3 TexCoord;

out float cylR1;
out float cylR2;
out vec3 cylDir;
out vec3 cylP0;
out vec3 cylP1;
out vec3 cylN0;
out vec3 cylN1;

uniform vec3 OSGCameraPosition;

in mat4 mMVv[];
in mat4 mPv[];

#define mMVP mPv[0]*mMVv[0]
#define mMV mMVv[0]
#define mP mPv[0]&#13;
&#13;
//PHONG-----------------&#13;
void addPhongVars(vec4 p) {&#13;
   MVPos = vec3(mMV*p);
   fvObjectPosition = vec3(mMVP*p);&#13;
   ViewDirection = -fvObjectPosition.xyz;
   ViewDirection = normalize(ViewDirection);
   &#13;
   /*vec4 p1 = gl_PositionIn[0];&#13;
   vec4 p2 = gl_PositionIn[1];
   vec3 d = normalize(p2.xyz - p1.xyz);
   TexCoord = p.xyz + 0.5 * d / (1.0+10*p.xyz);*/
   
   TexCoord = p.xyz;
   TexCoord.y *= 0.15;&#13;
}
&#13;
void emitTriangle(vec4 p1, vec4 p2, vec4 p3) {&#13;
   gl_Position = mMVP*p1;&#13;
   addPhongVars(p1);&#13;
   EmitVertex();&#13;
   gl_Position = mMVP*p2;&#13;
   addPhongVars(p2);&#13;
   EmitVertex();&#13;
   gl_Position = mMVP*p3;&#13;
   addPhongVars(p3);&#13;
   EmitVertex();&#13;
   EndPrimitive();&#13;
}&#13;
&#13;
void emitQuad(vec4 p1, vec4 p2, vec4 p3, vec4 p4) {&#13;
   emitTriangle(p1, p2, p4);&#13;
   emitTriangle(p2, p4, p3);&#13;
}&#13;
&#13;
void emitSimpleQuad(vec4 pos[4]) {&#13;
   emitQuad(pos[0], pos[1], pos[2], pos[3]);&#13;
}
&#13;
float Sign(in float x) {
    return step(0, x)*2 - 1;
}

vec3 getOffsets() {
   vec3 d = OSGCameraPosition - gl_PositionIn[1].xyz;
   return vec3(Sign(d[0]), Sign(d[1]), Sign(d[2]));
}
&#13;
void main() {&#13;
   vec4 p1 = gl_PositionIn[0];&#13;
   vec4 p2 = gl_PositionIn[1];
   
   cylR1 = tc[0][0]*0.05;
   cylR2 = tc[1][0]*0.05;
   cylDir = normalize(vec3(mMV * vec4(p2.xyz - p1.xyz,0.0)));
   //cylDir = vec3(mMV * vec4(normalize(p1.xyz - p2.xyz),0.0));
   cylP0 = vec3(mMV * p1);
   cylP1 = vec3(mMV * p2);
   cylN0 = vec3(mMV * vec4(0.0,1.0,0.0,0.0));
   cylN1 = vec3(mMV * vec4(0.0,1.0,0.0,0.0));
   &#13;
   gl_FrontColor = vec4(0.6, 0.6, 0.3, 1.0);&#13;

   vec3 offs = getOffsets();&#13;
   vec4 pos[4];
   float S1x = 0.05*offs.x;
   float S2x = -0.05*offs.x;
   float S1y = 0.05*offs.z;
   float S2y = -0.05*offs.z;&#13;
&#13;
   pos[0] = p1+vec4(S1x,0,S1y,0)*tc[0][0];&#13;
   pos[1] = p2+vec4(S1x,0,S1y,0)*tc[1][0];&#13;
   pos[2] = p2+vec4(S2x,0,S1y,0)*tc[1][0];&#13;
   pos[3] = p1+vec4(S2x,0,S1y,0)*tc[0][0];&#13;
   emitSimpleQuad(pos);&#13;
&#13;
   pos[0] = p2+vec4(S1x,0,S1y,0)*tc[1][0];&#13;
   pos[1] = p1+vec4(S1x,0,S1y,0)*tc[0][0];&#13;
   pos[2] = p1+vec4(S1x,0,S2y,0)*tc[0][0];&#13;
   pos[3] = p2+vec4(S1x,0,S2y,0)*tc[1][0];&#13;
   emitSimpleQuad(pos);
   
   vec4 pc = p1;
   float R = tc[0][0];
   if (offs.y &gt; 0) { pc = p2; R = tc[1][0]; }&#13;
   pos[0] = pc+vec4(S1x,0,S1y,0)*R;&#13;
   pos[1] = pc+vec4(S2x,0,S1y,0)*R;&#13;
   pos[2] = pc+vec4(S2x,0,S2y,0)*R;&#13;
   pos[3] = pc+vec4(S1x,0,S2y,0)*R;&#13;
   emitSimpleQuad(pos);&#13;
}





</core>
    </Script>
    <Script base_name="shrd_vert" name_space="__script__" name_suffix="0" persistency="666" unique="1" type="GLSL" mobile="">
      <core>
// vertex shader program&#13;
varying vec3 vert_normal;
varying mat4 mMVv;
varying mat4 mPv;
varying vec2 tc;&#13;
&#13;
attribute vec4 osg_Vertex;&#13;
attribute vec3 osg_Normal;
attribute vec2 osg_MultiTexCoord0;&#13;
&#13;
//----------------------------------------------------------------------------------------------MAIN--VP&#13;
void main( void ) {
	tc = osg_MultiTexCoord0;&#13;
    gl_Position = osg_Vertex;&#13;
    vert_normal = osg_Normal;
    mMVv = gl_ModelViewMatrix;
    mPv = gl_ProjectionMatrix;&#13;
}
</core>
    </Script>
  </Scripts>
  <Sockets persistency="666"/>
  <Background color="0.6 0.6 0.6" format=".png" path="" persistency="666" type="0"/>
  <Navigation active="Orbit" persistency="666"/>
  <Materials persistency="666"/>
  <Semantics persistency="666"/>
</Scene>
