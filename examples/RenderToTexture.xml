<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="Mechanics" name_space="Scene">
  <Objects>
    <Object base_name="Root" name_space="__global__" name_suffix="0" pickable="0" type="Object" visible="1">
      <Object ambient="0.3 0.3 0.3 1" base_name="Headlight" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" name_space="__global__" name_suffix="0" on="1" pickable="0" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1" type="Light" visible="1">
        <Object accept_root="1" aspect="1" at="0.915227 -0.0254144 0" at_dir="0" base_name="Default" cR="0 0 0" cT="0 1 0" cT_mode="1" do_cR="0" do_cT="0" far="250" fov="1.0472" from="-0.815401 0.809983 1.52296" name_space="__global__" name_suffix="0" near="0.1" pickable="0" scale="1 1 1" type="Camera" up="0 1 0" visible="1">
          <Object at="0 0 -1" at_dir="1" base_name="Headlight_beacon" cR="0 0 0" cT="0 1 0" cT_mode="1" do_cR="0" do_cT="0" from="0 0 0" light="Headlight" name_space="__global__" name_suffix="0" pickable="0" scale="1 1 1" type="LightBeacon" up="0 1 0" visible="1"/>
        </Object>
        <Object at="1 0 1" at_dir="1" base_name="info" cR="0 0 0" cT="0 1 0" cT_mode="1" do_cR="0" do_cT="0" from="1 0 0" name_space="__global__" name_suffix="0" pickable="0" scale="1 1 1" sourceparam="Box 0.5 0.5 0.5 1 1 1" sourcetype="3" type="Geometry" up="0 -1 0" visible="1"/>
        <Object at="-0.103078 1.5 -0.599958" at_dir="1" base_name="Cone" cR="0 0 0" cT="0 1 0" cT_mode="1" do_cR="0" do_cT="0" from="-0.103078 0.5 -0.599958" name_space="__global__" name_suffix="0" pickable="0" scale="1 1 1" sourceparam="Cone 0.1 0.05 16 1 1" sourcetype="3" type="Geometry" up="0.00307821 0 0.599958" visible="1"/>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" occlusion_culling="0" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import math
	Pi = math.pi
	
	def initRenderer(): # texture renderer ----
		tr = VR.TextureRenderer('bla')
		VR.getRoot().addChild(tr)
	
		cam = VR.Camera('cam')
		VR.rcam = cam
		li = VR.Light('sun')
		lib = VR.LightBeacon('sun_b')
		li.setBeacon(lib)
		tr.setup(cam, 512, 512)
		li.addChild(cam)
		tr.addChild(li)
		cam.addChild(lib)
		cam.setFrom(0.5,0.5,0)
		cam.setAt(-0.1,0.5,0)
		#li.addChild(root.find('mechanism'))
		tr.addLink(root)
		
		m = tr.getMaterial()
	
		cube = VR.Geometry('cube')
		cube.setPrimitive('Box 0.5 0.5 0.5 1 1 1')
		cube.setMaterial(m)
		cube.setPickable(1)
		root.addChild(cube)
	
	def initGears(): # gears ------------
	
		if hasattr(VR, 'mechanism'): VR.mechanism.destroy()
		VR.mechanism = VR.Transform('mechanism')
		VR.mechanism.translate(0,0.5,0)
		root.addChild(VR.mechanism)
	
		VR.gears = [] # for animation
	
		def addGear(params):
			g = VR.Geometry('gear')
			g.setPrimitive(' '.join([str(i) for i in params]))
			VR.mechanism.addChild(g)
			return g
		
		# parameters
		gP = 0.02 # gear pitch
		gN = 32 # gear teeth number 
		gR = gP*gN*0.5/Pi # gear radius
		gT = 0.02 # gear thickness
		gL = 0.01 # gear teeth length
		aR = 0.01 # axle radius
		
		g1 = addGear(['Gear', gT, aR, gP, int(1.5*gN), gL, 0])
		g2 = addGear(['Gear', gT, aR, gP, int(0.5*gN), gL, 0])
		g3 = addGear(['Gear', gT, aR, gP, int(0.5*gN), gL, -0.7])
		g4 = addGear(['Gear', gT, aR, gP, int(1.0*gN), gL, -0.7])
	
		g1.translate(-gR, 0, 0)
		g2.translate(gR, 0, 0)
		g3.translate(-gR, 0, gT)
		g4.translate(-gR, -0.5*gR, gR+gT)
		g4.rotate(1,0,0, -Pi*0.5)
	
		VR.gears.append([g1, 1, 1.5*gR])
		VR.gears.append([g2, -1, 0.5*gR])
		VR.gears.append([g3, 1, 1.5*gR])
		VR.gears.append([g4, -1, 3.0*gR])
		
	initGears()
	initRenderer()	
		
		
		
</core>
      <arg type="VRPyObjectType" value="Headlight" name_suffix="0" base_name="root" name_space="init"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="0" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="init_cam_view" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	c = VR.getRoot().find('cam')
	v = VR.getSetup().getView(1)
	v.setCamera(c)
</core>
    </Script>
    <Script name_suffix="0" base_name="rotate" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	if not hasattr(VR, 'gears'):
		return
	
	for g in VR.gears:
		dr = 0.002/g[2]
		d = g[0].getDir()
		g[0].rotate(d[0], d[1], d[2], g[1]*dr)
		
	VR.rcam.rotateAround(0.02)
	
	crep = VR.getRoot().find('Cone')
	crep.setFrom(VR.rcam.getFrom())
	crep.setUp(VR.rcam.getDir())
	crep.setDir(0,1,0)
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="0" key="0" name_suffix="1" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="screenshot" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	sc = VR.getSetup().getView(0).grab()
	m = VR.getRoot().find('info').getMaterial()
	m.setTexture(sc)
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="1000" key="0" name_suffix="2" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="screenshot2" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	# this screenshot takes the image from the texturerenderer
	# the advantage is that it is not related to the view, but to the camera
	# used by the texture renderer
	
	tg = VR.getRoot().find('bla')
	m = tg.getMaterial()
	t = m.getTexture()
	t.write('sc.png')
</core>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="1 1 1" format=".png" path="" type="0"/>
  <Navigation active="Orbit"/>
  <Materials/>
</Scene>
