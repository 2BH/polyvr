<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="Logistics" name_space="Scene">
  <Objects>
    <Object name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="-5.17378 1.203 5.28784" at="4.01791 1.203 -2.11379" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" accept_root="1" near="0.1" far="250" aspect="1" fov="1.0472">
          <Object name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering frustum_culling="1" occlusion_culling="0" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="initLogistics" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	r = VR.getRoot().find('Headlight')

	# ------------ paths -----------------
	
	if not hasattr(VR, 'ptool'):
		VR.ptool = VR.Pathtool()
	
		VR.paths = [4,4,10] # min 2
		for i,N in enumerate(VR.paths):
			VR.paths[i] = VR.ptool.newPath(None, r)
			for j in range(N-2):
				VR.ptool.extrude(None, VR.paths[i])
			
	if len(VR.paths) &gt;= 1:
		handles = VR.ptool.getHandles(VR.paths[0])
		handles[0].setFrom(8, 1, 1)
		handles[1].setFrom(7, 1, 3)
		handles[1].setDir(1,0,0)
		handles[2].setFrom(4, 1, 3)
		handles[2].setDir(1,0,0)
		handles[3].setFrom(4, 3, 5)
	
	if len(VR.paths) &gt;= 2:
		handles = VR.ptool.getHandles(VR.paths[1])
		handles[0].setFrom(8, 1, -1)
		handles[0].setDir(0,0,1)
		handles[1].setFrom(6, 1, -2)
		handles[1].setDir(1,0,0)
		handles[2].setFrom(4, 1, -2)
		handles[2].setDir(1,0,0)
		handles[3].setFrom(4, 0.3, -3)
		handles[3].setDir(0,0,1)
		
	if len(VR.paths) &gt;= 3:
		handles = VR.ptool.getHandles(VR.paths[2])
		handles[0].setFrom(7, 1, -6)
		handles[0].setDir(0,0,1)
		handles[1].setFrom(6, 1, -6)
		handles[1].setDir(1,0,0)
		handles[2].setFrom(5, 2, -6)
		handles[2].setDir(1,0,0)
		handles[3].setFrom(3, 2, -6)
		handles[3].setDir(1,0,0)
		handles[4].setFrom(2, 1, -6)
		handles[4].setDir(1,0,0)
		handles[5].setFrom(1, 1, -8)
		handles[5].setDir(1,0,0)
		handles[6].setFrom(0, 1, -8)
		handles[6].setDir(1,0,0)
		handles[7].setFrom(-1, 1, -4)
		handles[7].setDir(0,0,-1)
		handles[8].setFrom(-2, 2, -3)
		handles[8].setDir(1,0,0)
		handles[9].setFrom(-3, 2, -3)
		handles[9].setDir(1,0,0)
	
	VR.ptool.update()
	
	# ------------ logistics -------------
	
	if not hasattr(VR, 'log'):
		VR.log = VR.Factory.Logistics()
		VR.lnet = VR.log.addNetwork()
		r.addChild(VR.cardbox)
		r.addChild(VR.product)
	
	capacity = 100
	speed = 0.5
	
	VR.log_containers = []
	for p in VR.ptool.getPaths():
		lp = VR.log.addPath()
		n0 = None
		nodes = []
		for h in VR.ptool.getHandles(p):
			n = VR.lnet.addNodes(1, n0)
			nodes.append(n)
			n.setTransform(h)
			n0 = n
			lp.add(n)
			nodes.append(n)
	
		c0 = VR.log.addContainer(VR.cardbox)
		c0.setCapacity(capacity)
		c1 = VR.log.addContainer(VR.cardbox)
		c1.setCapacity(capacity)
		nodes[0].set(c0)
		nodes[-1].set(c1)
		VR.log_containers.append([c0,c1])
		VR.log.fillContainer(c0, capacity, VR.product)
	
		# set transporters
		t = VR.log.addTransporter('Product')
		t.setPath(lp)
		t.setSpeed(speed)
</core>
    </Script>
    <Script name_suffix="0" base_name="initScene" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	# materials
	
	mbricks = VR.Material('mbricks')
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	cp = 0.95
	tg.add('Perlin', 1, [cp,cp,cp], [1,1,1])
	tg.add('Perlin', 1.0/4, [cp,cp,cp], [1,1,1])
	tg.add('Bricks', 1, [0.4,0.4,0.4], [1,1,1])
	mbricks.setTexture(tg.compose(0))
	
	mcarboard = VR.Material('mcarboard')
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	tg.add('Perlin', 1, [0.5,0.3,0.1], [0.6,0.4,0.1])
	tg.add('Perlin', 1.0/4, [0.5,0.3,0.1], [0.7,0.6,0.2])
	mcarboard.setTexture(tg.compose(0))
	
	def setMetalic(mat, a,d,sp,sh):
		mat.setDiffuse([d,d,d])
		mat.setSpecular([sp,sp,sp])
		mat.setAmbient([a,a,a])
		mat.setShininess(128*sh)
	mchrome = VR.Material('mchrome')
	setMetalic(mchrome, 0.25, 0.4, 0.77, 0.6)
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	cp = 0.6
	tg.add('Perlin', 1.0/2, [cp,cp,cp], [1,1,1])
	tg.add('Perlin', 1.0/8, [cp,cp,cp], [1,1,1])
	mchrome.setTexture(tg.compose(0))
	mchrome.addPass()
	setMetalic(mchrome, 0.25, 0.9, 1, 0.6)
	mchrome.setTexture(tg.compose(1))
	mchrome.setTextureType('SphereEnv')
	mchrome.setTransparency(0.4)
	
	# geometries
	
	floor = VR.Geometry('floor')
	floor.setPrimitive('Plane 20 20 20 20')
	floor.setMaterial(mbricks)
	floor.setTexCoords(floor.getPositions())
	floor.setPose([0,0,0], [0,1,0], [1,0,0])
	root = VR.getRoot().find('Headlight')
	root.addChild(floor)
	
	VR.cardbox = VR.Geometry('cardbox')
	VR.cardbox.setPrimitive('Box 1 1 1 1')
	VR.cardbox.setMaterial(mcarboard)
	VR.cardbox.hide()
	
	t1 = VR.Geometry('t1')
	t2 = VR.Geometry('t2')
	t1.setPrimitive('Box 0.15 0.05 0.3 1 1 1')
	t2.setPrimitive('Box 0.12 0.1 0.2 1 1 1')
	#t2.setPrimitive('Gear 0.1 0.3 0.1 32 0.3 0')
	t2.setFrom(0,0.05,0.02)
	VR.product = VR.CSGGeometry('product')
	VR.product.addChild(t1)
	VR.product.addChild(t2)
	VR.product.setOperation('subtract')
	root.addChild(VR.product)
	VR.product.setEditMode(0)
	VR.product.setMaterial(mchrome)
	VR.product.setTexCoords(VR.product.getPositions())
	VR.product.hide()
	
	test = VR.product.duplicate()
		
</core>
    </Script>
    <Script name_suffix="1" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	VR.initScene()
	VR.initLogistics()
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="7" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="logistics_update" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	if hasattr(VR, 'log'):
		VR.log.update()
		
		for c in VR.log_containers:
			if c[0].isEmpty():
				VR.log.fillContainer(c[0], c[0].getCapacity(), VR.product)
			if c[1].isFull():
				c[1].clear()
</core>
      <trig type="on_timeout" dev="" state="Pressed" param="50" key="0" name_suffix="1" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="mat_Chrome" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	#if hasattr(VR, 'chrome'):
	#	return VR.chrome
	
	#http://devernay.free.fr/cours/opengl/materials.html
	
	def setMetalic(mat, a,d,sp,sh):
		mat.setDiffuse([d,d,d])
		mat.setSpecular([sp,sp,sp])
		mat.setAmbient([a,a,a])
		mat.setShininess(128*sh)	
	
	VR.chrome = VR.Material('Chrome')
	setMetalic(VR.chrome, 0.25, 0.4, 0.77, 0.6) #chrome
	#VR.chrome.setDiffuse([d,d,d])
	
	tg = VR.TextureGenerator()
	tg.setSize(50,50,50)
	cp = 0.6
	
	tg.add('Perlin', 1.0/2, [cp,cp,cp], [1,1,1])
	tg.add('Perlin', 1.0/8, [cp,cp,cp], [1,1,1])
	VR.chrome.setTexture(tg.compose(0))
	#return VR.chrome
	
	VR.chrome.addPass()
	setMetalic(VR.chrome, 0.25, 0.9, 1, 0.6)
	VR.chrome.setTexture('metal5.jpg')
	VR.chrome.setTextureType('SphereEnv')
	VR.chrome.setTransparency(0.4)
	
	return VR.chrome
</core>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="0.6 0.6 0.6" path="" type="0"/>
  <Navigation active="Orbit"/>
  <Materials/>
</Scene>
