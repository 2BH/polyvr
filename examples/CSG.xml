<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="CSG" name_space="Scene">
  <Objects>
    <Object name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="0.5532 2.547 1.23669" at="0.356428 2.41185 -1.27831" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="0" accept_root="1" near="0.1" far="250" aspect="1" fov="1.0472">
          <Object name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering frustum_culling="1" occlusion_culling="0" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="cmdAxisLock" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	# Key '3'
	target = dev.getIntersected()
	if target == None:
		return
		
	print target
		
	# Use isPickable to ensure only objects intended for manipulation
	# are destroyed. We'll see if this is sufficient.
	if target.isPickable():
		target.destroy()
</core>
      <trig type="on_device" dev="flystick" state="Released" param="" key="3" name_suffix="4" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="cmdCsgMenuClose" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	for obj in VR.selectedObjects:
		obj.getMaterial().setDiffuse(VR.colorNtl[0],
			VR.colorNtl[1],
			VR.colorNtl[2])
	del VR.selectedObjects[:]
	VR.selectedObjects = []		
	#VR.menus['CSG Menu'].hide()
	print "close"
	
</core>
    </Script>
    <Script name_suffix="0" base_name="cmdCsgOp" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	print 'csg intersect'
	if not operation:
		raise Exception("No operation specified!")
	if not len(VR.selectedObjects) == 2:
		raise Exception("Exactly two objects must be selected.")
	
	oldParents = []
	oldParents.append(VR.selectedObjects[0].getParent())
	oldParents.append(VR.selectedObjects[1].getParent())
	csg = VR.CSGGeometry(operation)
	csg.addChild(VR.selectedObjects[0])
	csg.addChild(VR.selectedObjects[1])
	#VR.selectedObjects[0].switchParent(csg)
	#VR.selectedObjects[1].switchParent(csg)
	csg.setOperation(operation)
	VR.csgRoot.addChild(csg)
	#csg = parent.find("intersect.3")
	csg.setPickable(True)
	if not csg.setEditMode(False):
		# There was an error (probably from CGAL)
		msg = VR.MenuItem("Sorry, CGAL error!", None, True)
		msg.show()
		
		# clean up
		VR.selectedObjects[0].switchParent(oldParents[0])
		VR.selectedObjects[1].switchParent(oldParents[1])
		csg.destroy()
	
	VR.cmdCsgMenuClose()
</core>
      <arg type="str" value="None" name_suffix="0" base_name="operation" name_space="cmdCsgOp"/>
    </Script>
    <Script name_suffix="0" base_name="cmdDelete" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	# Key '2'
	intersected = dev.getIntersected()
	if intersected in VR.selectedObjects:
		VR.selectedObjects = []
	
	parent = intersected.getParent()
	intersected.destroy()
	if isinstance(parent, VR.CSGGeometry) and len(parent.getChildren()) == 0:
		parent.destroy()
</core>
      <trig type="on_device" dev="flystick" state="Released" param="" key="2" name_suffix="3" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="cmdSelect" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	intersected = dev.getIntersected()
	
	if len(VR.selectedObjects) &lt; 2:
		VR.selectedObjects.append(intersected)
		mat = intersected.getMaterial()
		mat.setDiffuse(VR.colorSel[0],
			VR.colorSel[1],
			VR.colorSel[2])
		#intersected.setMaterial(mat)
		print "selected:", intersected.getName()
	if len(VR.selectedObjects) == 2:
		print 'show menu'
		VR.menus["CSG Menu"].show()

</core>
      <arg type="VRPyDeviceType" value="None" name_suffix="0" base_name="dev" name_space="cmdSelect"/>
    </Script>
    <Script name_suffix="0" base_name="cmdSwitchEditMode" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	# Key '4'
	print "Button 4: edit mode"
	
	intersected = dev.getIntersected()
	
	if isinstance(intersected, VR.CSGGeometry):
		intersected.setEditMode(not intersected.getEditMode())
	elif isinstance(intersected.getParent(), VR.CSGGeometry):
		parent = intersected.getParent()
		parent.setEditMode(not parent.getEditMode())
</core>
      <trig type="on_device" dev="flystick" state="Released" param="" key="4" name_suffix="5" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="cmdSwitchMoveScale" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	# Key '1'
		
	if not VR.scaleEnabled:
		print "start scale mode"
		VR.scaleEnabled = True
		VR.modeSpr.setText("scale")
		VR.modeSpr.setSize(0.2 * len("scale"), 1)
	else:
		print "end scale mode"
		VR.scaleEnabled = False
		VR.modeSpr.setText("select")
		VR.modeSpr.setSize(0.2 * len("select"), 1)
		
</core>
      <trig type="on_device" dev="flystick" state="Released" param="" key="1" name_suffix="2" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="keyboard" state="Released" param="" key="104" name_suffix="9" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="createSample" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	sample = None
	
	if primitive == "sphere":
		sample = VR.Geometry("sample sphere")
		sample.setPrimitive("Sphere")
		sample.setScale(.2, .2, .2)
		sample.setFrom(0, 0, 0)
		sample.setDir(0, 0, 1)
	elif primitive == "cube":
		sample = VR.Geometry("sample cube")
		sample.setPrimitive("Box")
		sample.setScale(.4, .4, .4)
		sample.setFrom(.5, 0, 0)
		sample.setDir(0, 0, 1)
	elif primitive == "cylinder":
		sample = VR.Geometry("sample cylinder")
		sample.setPrimitive("Cylinder")
		sample.setScale(.2, .2, .2)
		sample.setFrom(1, 0, 0)
		sample.setDir(0, 0, 1)
	elif primitive == "torus":
		sample = VR.Geometry("sample torus")
		sample.setPrimitive("Torus")
		sample.setScale(.2, .2, .2)
		sample.setFrom(-.6, 0, 0)
		sample.setUp(0, 0, 1)
		sample.setDir(0, 1, 0)
	else:
		print "Error: unknown primitive type:", primitive
		return None
	
	sample.setPickable(True)
	sample.setMaterial(VR.Material("sample material"))
	VR.sampleRoot.addChild(sample)
	return sample

</core>
      <arg type="str" value="0" name_suffix="0" base_name="primitive" name_space="createSample"/>
    </Script>
    <Script name_suffix="0" base_name="drawTree" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	# Performs Depth-first-search to reproduce the construction tree
	# using sprites for visualization.
	class TreeBuilder:
		"""
		Builds a sprite representation of the csg construction tree
		using depth-first search.
		"""
		spriteHeight = .3
		curY = -spriteHeight
	
		def buildTree(self, treeNode, constrNode, level):
			VR.spriteGeomMap = {}
		
			for child in constrNode.getChildren():
				sprite = VR.Sprite(child.getName())
				sprite.setMaterial(VR.Material('treesprite'))
				# Enable easy mapping from clicked sprite to geometry
				VR.spriteGeomMap[sprite] = child
			
				indentation = ""
				for i in xrange(level):
					indentation += "| "
				sprite.setText(indentation + child.getName())
				width = len(sprite.getText()) * 0.18 * self.spriteHeight
				sprite.setSize(width, self.spriteHeight)
				sprite.setFrom(-width/2.0, self.curY, 0)
				
				treeNode.addChild(sprite)
				at = sprite.getWorldFrom()
				sprite.setDir(0, 0, 1)
				self.curY -= self.spriteHeight
			
				if len(child.getChildren()) &gt; 0:
					self.buildTree(treeNode, child, level + 1)
	
	if not VR.treeRedrawEnabled:
		return
	
	# delete old tree
	if VR.visTree:
		VR.visTree.destroy()
		VR.visTree = None
	
	treeRoot = VR.Sprite("visual tree")
	treeRoot.setText("*")
	treeRoot.setSize(len(treeRoot.getText()) * .18 * .3, .3)
	treeRoot.setFrom(-1.9, 1.4, -3)
	#treeRoot.setFrom(0, 0, -3)
	treeRoot.setDir(0, 0, 1)
	tb = TreeBuilder()
	
	if VR.csgRoot:
		tb.buildTree(treeRoot, VR.csgRoot, 1)
		VR.visTree = treeRoot
		VR.camera.addChild(treeRoot)
	
</core>
    </Script>
    <Script name_suffix="0" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import VR

	print "Hint: remember setting mouse/Flystick mode in trackFlystick!"
	print "left mouse button actions:"
	print "\tj: switch move/scale mode"
	print "\tk: switch edit mode"
	print "\tl: delete"

	VR.treeRedrawEnabled = True
	VR.scaleEnabled = False
	VR.currentlyScaling = False
	VR.lastBeaconDir = (0,1,0)
	VR.visTree = None
	VR.lastDragged = None
	VR.colorSel = (1.0, 0.9, 0.2) # selected objects
	VR.colorNtl = (1.0, 1.0, 1.0) # "neutral" objects
	
	# needed for Flystick emulation
	VR.clickAction = "select"

	VR.root = root_1
	VR.camera = camera
	VR.csgRoot = csgRoot
	VR.sampleRoot = sampleRoot
	VR.initScene()
	VR.initMenu()

</core>
      <arg type="VRPyTransformType" value="Default" name_suffix="0" base_name="camera" name_space="init"/>
      <arg type="NoneType" value="csg root" name_suffix="0" base_name="csgRoot" name_space="init"/>
      <arg type="VRPyTransformType" value="Headlight" name_suffix="1" base_name="root" name_space="init"/>
      <arg type="NoneType" value="sample root" name_suffix="0" base_name="sampleRoot" name_space="init"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="1" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="initMenu" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import math
	
	class MenuItem:
		"""
		Represents one menu item in a menu hierarchy.
		Manages it's own VR.Sprite.
		"""
	
		def __init__(self, txt, parent, isMenuRoot = False):
			"""
			txt: Menu item text label
			parent: Parent menu item (*not* scene graph parent!)
			isMenuRoot: determines if this item is the menu hierarchy's root
			TODO: don't take this explicitly, if we have a parent,
				we're not the menu root.
			"""
			self.sprite = VR.Sprite(txt)
			self.sprite.setMaterial(VR.Material(txt))
			self.sprite.setText(txt)
			self.sprite.setSize(0.1 * len(txt), 0.2)
			self.sprite.hide()
			self.children = []
			self.menuOpen = False # Tells if our children are currently shown
			self.txt = txt
			self.parent = parent
			self.menuRoot = isMenuRoot
			
			VR.camera.addChild(self.sprite)
			if parent != None:
				parent.children.append(self)
			
			VR.menus[self.sprite.getText()] = self
		
		# Shows all our children (!) and ourselves
		def show(self):
			print self.sprite.getName(), "show"
			if VR.menuOpen:
				# Close any other open menu (just one at a time!)
				VR.menuOpen.hide()
			VR.menuOpen = self
			self.menuOpen = True
			
			self.sprite.show()
			if self.menuRoot:
				self.sprite.setFrom(VR.menuPos[0],
									VR.menuPos[1],
									VR.menuPos[2])
			else:
				self.sprite.setFrom(self.parent.sprite.getFrom()[0],
									self.parent.sprite.getFrom()[1],
									self.parent.sprite.getFrom()[2])
			
			# TODO Caculate dir -&gt; cam
			self.sprite.setDir(0, 0, -1)
			scale = 0.2
			ref = self.sprite.getFrom()
			for i, c in enumerate(self.children):
				c.sprite.setFrom(ref[0], ref[1] - scale * (i+1), ref[2])
				c.sprite.setDir(0, 0, -1)
				c.sprite.show()
		
		def hide(self):
			print self.sprite.getName(), "hide"
			VR.menuOpen = None
			self.menuOpen = False
			self.sprite.hide()
			for mItem in self.children:
				mItem.sprite.hide()
		
		def execute(self):
			if self.menuRoot:
				if self.menuOpen:
					self.hide()
			elif len(self.children) &gt; 0:
				if self.menuOpen:
					self.hide()
					self.parent.show()
				else:
					self.parent.hide()
					self.show()
			
			if self in VR.menuFuncs.keys():
				VR.menuFuncs[self]()
				VR.menuOpen.hide()
			
	# Make class MenuItem available in module VR
	VR.MenuItem = MenuItem		
	
	if hasattr(VR, 'menus'):
		for k, menuItem in VR.menus.items():
			menuItem.sprite.destroy()
		VR.menus.clear()
		VR.menuFuncs.clear()
	else:
		VR.menus = {}
		VR.menuFuncs = {}
	
	VR.menuPos = [0, 0, -1.5]
	VR.menuOpen = None
	
	mRoot = MenuItem('Menu', None, True)
	# Top menu layer
	mAxisLock = MenuItem('Axis Lock', mRoot)
	# Axis Lock children
	mOnlyX = MenuItem('X', mAxisLock)
	VR.menuFuncs[mOnlyX] = lambda: VR.cmdAxisLock('x')
	mOnlyY = MenuItem('Y', mAxisLock)
	VR.menuFuncs[mOnlyY] = lambda: VR.cmdAxisLock('y')
	mOnlyZ = MenuItem('Z', mAxisLock)
	VR.menuFuncs[mOnlyZ] = lambda: VR.cmdAxisLock('z')
	#mRoot.show()
	
	# Setup CSG op menu
	mRoot = MenuItem('CSG Menu', None, True)
	VR.menuFuncs[mRoot] = VR.cmdCsgMenuClose
	mUnite = MenuItem('Unite', mRoot)
	VR.menuFuncs[mUnite] = lambda: VR.cmdCsgOp('unite')
	mSubtract = MenuItem('Subtract', mRoot)
	VR.menuFuncs[mSubtract] = lambda: VR.cmdCsgOp('subtract')
	mIntersect = MenuItem('Intersect', mRoot)
	VR.menuFuncs[mIntersect] = lambda: VR.cmdCsgOp('intersect')
	
	# Setup mode sprite
	msgSpr = VR.Sprite("Mode")
	msgSpr.setMaterial(VR.Material('mode'))
	msgSpr.setText("select")
	msgSpr.setSize(0.1 * len("select"), 0.13)
	msgSpr.setFrom(0.5,0.5,-1)
	msgSpr.setDir(0,0,-1)
	VR.modeSpr = msgSpr
	VR.camera.addChild(msgSpr)
	
</core>
    </Script>
    <Script name_suffix="0" base_name="initScene" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	VR.selectedObjects = []
	
	# Check if primitive roots already exist.
	# This "fails" if there's a node "row root.2",
	# but that in turn only exists if humans messed
	# things up :)
	oldRowRoot = VR.sampleRoot
	if oldRowRoot:
		oldRowRoot.destroy()
		
	oldCsgRoot = VR.csgRoot
	if oldCsgRoot:
		oldCsgRoot.destroy()
	
	csgRoot = VR.Transform("csg root")
	csgRoot.setFrom(.6, 1.8, -.7) # TODO same as rowRoot
	csgRoot.setFrom(0,0,0)
	csgRoot.setDir(0, 0, -1)
	VR.root.addChild(csgRoot)
	VR.csgRoot = csgRoot
	
	# TODO
	# Couldn't figure out a way to implement
	# Geometry.setMesh nicely yet.
	# -&gt; VR.loadCollada from vrpSS14 branch
	
	# create primitive row parent
	sampleRoot = VR.Transform("sample root")
	sampleRoot.setFrom(.6, 1.8, -.7)
	sampleRoot.setDir(0, 0, -1)
	VR.root.addChild(sampleRoot)
	VR.sampleRoot = sampleRoot
	
	# place sample primitives
	VR.samplePrims = {}
	sphere = VR.createSample("sphere")
	VR.samplePrims[sphere.getName()] = sphere
	cube = VR.createSample("cube")
	VR.samplePrims[cube.getName()] = cube
	cylinder = VR.createSample("cylinder")
	VR.samplePrims[cylinder.getName()] = cylinder
	torus = VR.createSample("torus")
	VR.samplePrims[torus.getName()] = torus
	
</core>
    </Script>
    <Script name_suffix="0" base_name="keyDelete" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	VR.clickAction = "delete"
	print "click action:", VR.clickAction
	VR.modeSpr.setText(VR.clickAction)
	VR.modeSpr.setSize(0.2 * len(VR.clickAction), 1)
</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="108" name_suffix="14" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="keySelect" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	VR.clickAction = "select"
	print "click action:", VR.clickAction
	VR.cmdSwitchMoveScale(None, dev)

</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="106" name_suffix="13" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="keySwitchEditMode" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	VR.clickAction = "switchEditMode"
	print "click action:", VR.clickAction
	VR.modeSpr.setText(VR.clickAction)
	VR.modeSpr.setSize(0.2 * len(VR.clickAction), 1)

</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="107" name_suffix="8" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="showNotification" name_space="__script__" type="Python" mobile="">
      <core>
	if not msg:
		return
	
	import VR
	from threading import Timer
	
	def hideNotification():
		VR.notification.destroy()
	
	msgSpr = VR.Sprite("notification")
	msgSpr.setText(msg)
	msgSpr.setSize(0.2 * len(msg), 1)
	msgSpr.setFrom(0, 0, -3)
	at = VR.camera.getDir()
	msgSpr.setDir(at[0], at[1], at[2])
	VR.notification = msgSpr
	VR.camera.addChild(msgSpr)
	
	# When the timer finishes, PolyVR crashes reproducibly.
	#Timer(1.0, hideNotification).start()
	msgSpr.destroy()
	
</core>
      <arg type="str" value="0" name_suffix="0" base_name="msg" name_space="showNotification"/>
    </Script>
    <Script name_suffix="0" base_name="startDragTimer" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	from datetime import datetime
	
	VR.dragStart = datetime.now()
	
</core>
    </Script>
    <Script name_suffix="0" base_name="stopDragTimer" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	from datetime import datetime, timedelta
	
	dragStop = datetime.now()
	clickTimeout = VR.dragStart + timedelta(microseconds=200000)
	return dragStop &gt; clickTimeout
	
</core>
    </Script>
    <Script name_suffix="0" base_name="test" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	# triggers crash!
	#spr = VR.Sprite("blub")
	#spr.setText("blub")
	
	mat = obj.getMaterial()
	#mat = VR.Material("selected")
	print mat.getDiffuse()
	mat.setDiffuse(1,1,0)
	print mat.getDiffuse()
	obj.setMaterial(mat)
	
</core>
      <arg type="VRPyGeometryType" value="cube" name_suffix="0" base_name="obj" name_space="test"/>
      <trig type="on_device" dev="mouse" state="pressed" param="" key="5" name_suffix="0" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="trackFlystick" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	from math import isnan	
	
	def subtract(a, b):
		"""
		Subtracts vector b from vector a
		"""
		try:
			return [a[0] - b[0],
					a[1] - b[1],
					a[2] - b[2]]
		except:
			raise ValueError("subtract expects two 3-dimensional vectors.")
	
	# Switch between mouse and Flystick mode. The former tracks the rotational
	# motion of the mouse beacon, the latter relies on the translational
	# motion. This is due to the fact that the mouse beacon never translates,
	# but translation is more convenient when using the Flystick in VR.
	mouseMode = True
	
	if not VR.currentlyScaling:
		VR.lastBeaconDir = beacon.getDir()
		return
	
	if mouseMode:
		beaconDir = beacon.getDir()
		diff = subtract(beacon.getDir(), VR.lastBeaconDir)
		mouseDeltaMvmt = diff[0]
		VR.lastBeaconDir = beaconDir
		
		# Enough computation, scale something!
		oldScale = VR.lastDragged.getScale()
		print oldScale[0] + mouseDeltaMvmt
		VR.lastDragged.setScale(oldScale[0] + mouseDeltaMvmt,
								oldScale[0] + mouseDeltaMvmt,
								oldScale[0] + mouseDeltaMvmt)
	else:
		pass # TODO

</core>
      <arg type="VRPyTransformType" value="mouse_beacon" name_suffix="0" base_name="beacon" name_space="trackFlystick"/>
      <trig type="on_timeout" dev="" state="Pressed" param="50" key="0" name_suffix="12" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="triggerDown" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	VR.startDragTimer()
	VR.treeRedrawEnabled = False
	target = dev.getDragged()
	if target == None:
		return
	VR.lastDragged = target
		
	targetName = target.getName().split(".")[0]
	print "down:", target.getName()
	
	if VR.scaleEnabled:
		# keep track of where the flystick moves, we need to scale
		VR.currentlyScaling = True
	elif targetName in VR.samplePrims.keys():
		# Sample primitive was grabbed
		picked = VR.samplePrims[targetName]
		primitiveType = targetName.split(" ")[1]
		target.setName(primitiveType)
		
		# create a new instance for the sample row
		newSample = VR.createSample(primitiveType)
		if newSample is not None:
			VR.samplePrims["sample " + primitiveType] = newSample
		
</core>
      <trig type="on_device" dev="mouse" state="Pressed" param="" key="0" name_suffix="15" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="flystick" state="Pressed" param="" key="0" name_suffix="6" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="triggerUp" name_space="__script__" type="Python" mobile="">
      <core>
	import VR

	def finish():
		""" Cleanup actions that need to be done *always* """
		VR.treeRedrawEnabled = True

	isDrag = VR.stopDragTimer()
	#print "CLICK:", clickDevice.getName(), "clicked with", clickDevice.getButton(0)
	dragged = VR.lastDragged
	intersected = dev.getIntersected()
	if not intersected:
		intersected = dev.getIntersected()
	if not dragged and not intersected:
		finish()
		return
	
	# Cases:
	# Nothing dragged/single click -&gt; intr + isDrag (true/false)
	# Object dragged -&gt; dragged + isDrag (true)
	
	if dragged:
		print "drag up:", dragged.getName(), "drag:", isDrag
	if intersected:
		print "intr up:", intersected.getName(), "drag:", isDrag
	
	if VR.scaleEnabled:
		VR.currentlyScaling = False
	if isDrag and dragged:
		# Actual DnD operation
		if dragged.getParent().getName() == "sample root":
			print "Reparenting..."
			worldPos = dragged.getWorldFrom()
			dragDir = dragged.getDir()
			rootPos = VR.csgRoot.getFrom()
			newPos = [worldPos[0] - rootPos[0],
					worldPos[1] - rootPos[1],
					worldPos[2] - rootPos[2]]
			dragged.switchParent(VR.csgRoot)
			dragged.setFrom(newPos[0], newPos[1], newPos[2])
			dragged.setDir(dragDir[0], dragDir[1], dragDir[2])
		finish()
		return

	# Ignore drag stuff, this is an ordinary click
	if intersected:
		try:
			if intersected.getText() in VR.menus.keys():
				# A menu item was clicked
				#print VR.menus[target.getName()], VR.menus[target.getName()].execute
				VR.menus[intersected.getText()].execute()
				#VR.menus['CSG Menu'].hide() # done elsewhere
				VR.selectedObjects = []
		except:
			# something non-menu was clicked
			if intersected.isPickable():
				if VR.clickAction == "select":
					if (not intersected.getName().split(" ")[0] == "sample" and
					not intersected in VR.selectedObjects):
						VR.cmdSelect(dev)
				elif VR.clickAction == "switchEditMode":
					VR.cmdSwitchEditMode(dev)
				elif VR.clickAction == "delete":
					VR.cmdDelete(dev)
	finish()

</core>
      <trig type="on_device" dev="mouse" state="Released" param="" key="0" name_suffix="16" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="flystick" state="Released" param="" key="0" name_suffix="7" base_name="trigger" name_space="__global__"/>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="1 1 1" path="data/common/skybox/sky/Sky" type="0"/>
  <Navigation active="Orbit"/>
  <Materials/>
</Scene>
