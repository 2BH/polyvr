<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="CSG" name_space="Scene">
  <Objects>
    <Root name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Headlight name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Default name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="0.519954 2.33369 0.720612" at="0.70528 1.83939 -0.537818" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="0" accept_root="1" near="0.1" far="250" aspect="1" fov="1.0472">
          <Headlight_beacon name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Default>
        <room name_suffix="0" base_name="room" name_space="__global__" type="Transform" pickable="0" visible="1" from="0 0 0" at="0 -1 0" up="1 0 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1">
          <Table name_suffix="0" base_name="Table" name_space="__global__" type="Geometry" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" sourcetype="2" sourceparam="data/CSG/table.dae Cube"/>
          <Walls name_suffix="0" base_name="Walls" name_space="__global__" type="Geometry" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" sourcetype="2" sourceparam="data/CSG/room.dae Cube0"/>
          <Floor name_suffix="0" base_name="Floor" name_space="__global__" type="Geometry" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" sourcetype="2" sourceparam="data/CSG/room.dae Cube.002"/>
          <Fly name_suffix="0" base_name="Fly" name_space="__global__" type="Geometry" pickable="0" visible="1" from="0 0.1 0" at="0 0.1 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" sourcetype="2" sourceparam="data/CSG/room.dae Cube.001"/>
        </room>
      </Headlight>
    </Root>
  </Objects>
  <Rendering frustum_culling="1" occlusion_culling="0"/>
  <Scripts>
    <cmdAxisLock core="&#9;import VR&#10;&#9;&#10;&#9;# Key '3'&#10;&#9;target = dev.getIntersected()&#10;&#9;if target == None:&#10;&#9;&#9;return&#10;&#9;&#9;&#10;&#9;print target&#10;&#9;&#9;&#10;&#9;# Use isPickable to ensure only objects intended for manipulation&#10;&#9;# are destroyed. We'll see if this is sufficient.&#10;&#9;if target.isPickable():&#10;&#9;&#9;target.destroy()" type="Python" mobile="">
      <trig type="on_device" dev="flystick" state="Released" param="" key="3" name_suffix="4" base_name="trigger" name_space="__global__"/>
    </cmdAxisLock>
    <cmdCsgMenuClose core="&#9;import VR&#10;&#9;&#10;&#9;for obj in VR.selectedObjects:&#10;&#9;&#9;obj.getMaterial().setDiffuse(VR.colorNtl[0],&#10;&#9;&#9;&#9;VR.colorNtl[1],&#10;&#9;&#9;&#9;VR.colorNtl[2])&#10;&#9;del VR.selectedObjects[:]&#10;&#9;VR.selectedObjects = []&#9;&#9;&#10;&#9;#VR.menus['CSG Menu'].hide()&#10;&#9;print &quot;close&quot;&#10;&#9;" type="Python" mobile=""/>
    <cmdCsgOp core="&#9;import VR&#10;&#9;&#10;&#9;print 'csg intersect'&#10;&#9;if not operation:&#10;&#9;&#9;raise Exception(&quot;No operation specified!&quot;)&#10;&#9;if not len(VR.selectedObjects) == 2:&#10;&#9;&#9;raise Exception(&quot;Exactly two objects must be selected.&quot;)&#10;&#9;&#10;&#9;oldParents = []&#10;&#9;oldParents.append(VR.selectedObjects[0].getParent())&#10;&#9;oldParents.append(VR.selectedObjects[1].getParent())&#10;&#9;csg = VR.CSGGeometry(operation)&#10;&#9;csg.addChild(VR.selectedObjects[0])&#10;&#9;csg.addChild(VR.selectedObjects[1])&#10;&#9;#VR.selectedObjects[0].switchParent(csg)&#10;&#9;#VR.selectedObjects[1].switchParent(csg)&#10;&#9;csg.setOperation(operation)&#10;&#9;VR.csgRoot.addChild(csg)&#10;&#9;#csg = parent.find(&quot;intersect.3&quot;)&#10;&#9;csg.setPickable(True)&#10;&#9;if not csg.setEditMode(False):&#10;&#9;&#9;# There was an error (probably from CGAL)&#10;&#9;&#9;msg = VR.MenuItem(&quot;Sorry, CGAL error!&quot;, None, True)&#10;&#9;&#9;msg.show()&#10;&#9;&#9;&#10;&#9;&#9;# clean up&#10;&#9;&#9;VR.selectedObjects[0].switchParent(oldParents[0])&#10;&#9;&#9;VR.selectedObjects[1].switchParent(oldParents[1])&#10;&#9;&#9;csg.destroy()&#10;&#9;&#10;&#9;VR.cmdCsgMenuClose()" type="Python" mobile="">
      <arg type="str" value="None" name_suffix="0" base_name="operation" name_space="cmdCsgOp"/>
    </cmdCsgOp>
    <cmdDelete core="&#9;import VR&#10;&#9;&#10;&#9;# Key '2'&#10;&#9;intersected = dev.getIntersected()&#10;&#9;if intersected in VR.selectedObjects:&#10;&#9;&#9;VR.selectedObjects = []&#10;&#9;&#10;&#9;parent = intersected.getParent()&#10;&#9;intersected.destroy()&#10;&#9;if isinstance(parent, VR.CSGGeometry) and len(parent.getChildren()) == 0:&#10;&#9;&#9;parent.destroy()" type="Python" mobile="">
      <trig type="on_device" dev="flystick" state="Released" param="" key="2" name_suffix="3" base_name="trigger" name_space="__global__"/>
    </cmdDelete>
    <cmdSelect core="&#9;import VR&#10;&#9;&#10;&#9;intersected = dev.getIntersected()&#10;&#9;&#10;&#9;if len(VR.selectedObjects) &lt; 2:&#10;&#9;&#9;VR.selectedObjects.append(intersected)&#10;&#9;&#9;mat = intersected.getMaterial()&#10;&#9;&#9;mat.setDiffuse(VR.colorSel[0],&#10;&#9;&#9;&#9;VR.colorSel[1],&#10;&#9;&#9;&#9;VR.colorSel[2])&#10;&#9;&#9;#intersected.setMaterial(mat)&#10;&#9;&#9;print &quot;selected:&quot;, intersected.getName()&#10;&#9;if len(VR.selectedObjects) == 2:&#10;&#9;&#9;print 'show menu'&#10;&#9;&#9;VR.menus[&quot;CSG Menu&quot;].show()&#10;" type="Python" mobile="">
      <arg type="VRPyDeviceType" value="None" name_suffix="0" base_name="dev" name_space="cmdSelect"/>
    </cmdSelect>
    <cmdSwitchEditMode core="&#9;import VR&#10;&#9;&#10;&#9;# Key '4'&#10;&#9;print &quot;Button 4: edit mode&quot;&#10;&#9;&#10;&#9;intersected = dev.getIntersected()&#10;&#9;&#10;&#9;if isinstance(intersected, VR.CSGGeometry):&#10;&#9;&#9;intersected.setEditMode(not intersected.getEditMode())&#10;&#9;elif isinstance(intersected.getParent(), VR.CSGGeometry):&#10;&#9;&#9;parent = intersected.getParent()&#10;&#9;&#9;parent.setEditMode(not parent.getEditMode())" type="Python" mobile="">
      <trig type="on_device" dev="flystick" state="Released" param="" key="4" name_suffix="5" base_name="trigger" name_space="__global__"/>
    </cmdSwitchEditMode>
    <cmdSwitchMoveScale core="&#9;import VR&#10;&#9;&#10;&#9;# Key '1'&#10;&#9;&#9;&#10;&#9;if not VR.scaleEnabled:&#10;&#9;&#9;print &quot;start scale mode&quot;&#10;&#9;&#9;VR.scaleEnabled = True&#10;&#9;&#9;VR.modeSpr.setText(&quot;scale&quot;)&#10;&#9;&#9;VR.modeSpr.setSize(0.2 * len(&quot;scale&quot;), 1)&#10;&#9;else:&#10;&#9;&#9;print &quot;end scale mode&quot;&#10;&#9;&#9;VR.scaleEnabled = False&#10;&#9;&#9;VR.modeSpr.setText(&quot;select&quot;)&#10;&#9;&#9;VR.modeSpr.setSize(0.2 * len(&quot;select&quot;), 1)&#10;&#9;&#9;" type="Python" mobile="">
      <arg type="VRPyDeviceType" value="flystick" name_suffix="0" base_name="dev" name_space="cmdSwitchMoveScale"/>
      <trig type="on_device" dev="flystick" state="Released" param="" key="1" name_suffix="2" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="keyboard" state="Released" param="" key="104" name_suffix="9" base_name="trigger" name_space="__global__"/>
    </cmdSwitchMoveScale>
    <createSample core="&#9;import VR&#10;&#9;&#10;&#9;sample = None&#10;&#9;&#10;&#9;if primitive == &quot;sphere&quot;:&#10;&#9;&#9;sample = VR.Geometry(&quot;sample sphere&quot;)&#10;&#9;&#9;sample.setPrimitive(&quot;Sphere&quot;)&#10;&#9;&#9;sample.setScale(.2, .2, .2)&#10;&#9;&#9;sample.setFrom(0, 0, 0)&#10;&#9;&#9;sample.setDir(0, 0, 1)&#10;&#9;elif primitive == &quot;cube&quot;:&#10;&#9;&#9;sample = VR.Geometry(&quot;sample cube&quot;)&#10;&#9;&#9;sample.setPrimitive(&quot;Box&quot;)&#10;&#9;&#9;sample.setScale(.4, .4, .4)&#10;&#9;&#9;sample.setFrom(.5, 0, 0)&#10;&#9;&#9;sample.setDir(0, 0, 1)&#10;&#9;elif primitive == &quot;cylinder&quot;:&#10;&#9;&#9;sample = VR.Geometry(&quot;sample cylinder&quot;)&#10;&#9;&#9;sample.setPrimitive(&quot;Cylinder&quot;)&#10;&#9;&#9;sample.setScale(.2, .2, .2)&#10;&#9;&#9;sample.setFrom(1, 0, 0)&#10;&#9;&#9;sample.setDir(0, 0, 1)&#10;&#9;elif primitive == &quot;torus&quot;:&#10;&#9;&#9;sample = VR.Geometry(&quot;sample torus&quot;)&#10;&#9;&#9;sample.setPrimitive(&quot;Torus&quot;)&#10;&#9;&#9;sample.setScale(.2, .2, .2)&#10;&#9;&#9;sample.setFrom(-.6, 0, 0)&#10;&#9;&#9;sample.setUp(0, 0, 1)&#10;&#9;&#9;sample.setDir(0, 1, 0)&#10;&#9;else:&#10;&#9;&#9;print &quot;Error: unknown primitive type:&quot;, primitive&#10;&#9;&#9;return None&#10;&#9;&#10;&#9;sample.setPickable(True)&#10;&#9;sample.setMaterial(VR.Material(&quot;sample material&quot;))&#10;&#9;VR.sampleRoot.addChild(sample)&#10;&#9;return sample&#10;" type="Python" mobile="">
      <arg type="str" value="0" name_suffix="0" base_name="primitive" name_space="createSample"/>
    </createSample>
    <drawTree core="&#9;import VR&#10;&#9;&#10;&#9;# Performs Depth-first-search to reproduce the construction tree&#10;&#9;# using sprites for visualization.&#10;&#9;class TreeBuilder:&#10;&#9;&#9;&quot;&quot;&quot;&#10;&#9;&#9;Builds a sprite representation of the csg construction tree&#10;&#9;&#9;using depth-first search.&#10;&#9;&#9;&quot;&quot;&quot;&#10;&#9;&#9;spriteHeight = .3&#10;&#9;&#9;curY = -spriteHeight&#10;&#9;&#10;&#9;&#9;def buildTree(self, treeNode, constrNode, level):&#10;&#9;&#9;&#9;VR.spriteGeomMap = {}&#10;&#9;&#9;&#10;&#9;&#9;&#9;for child in constrNode.getChildren():&#10;&#9;&#9;&#9;&#9;sprite = VR.Sprite(child.getName())&#10;&#9;&#9;&#9;&#9;# Enable easy mapping from clicked sprite to geometry&#10;&#9;&#9;&#9;&#9;VR.spriteGeomMap[sprite] = child&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;indentation = &quot;&quot;&#10;&#9;&#9;&#9;&#9;for i in xrange(level):&#10;&#9;&#9;&#9;&#9;&#9;indentation += &quot;| &quot;&#10;&#9;&#9;&#9;&#9;sprite.setText(indentation + child.getName())&#10;&#9;&#9;&#9;&#9;width = len(sprite.getText()) * 0.18 * self.spriteHeight&#10;&#9;&#9;&#9;&#9;sprite.setSize(width, self.spriteHeight)&#10;&#9;&#9;&#9;&#9;sprite.setFrom(-width/2.0, self.curY, 0)&#10;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;treeNode.addChild(sprite)&#10;&#9;&#9;&#9;&#9;at = sprite.getWorldFrom()&#10;&#9;&#9;&#9;&#9;sprite.setDir(0, 0, 1)&#10;&#9;&#9;&#9;&#9;self.curY -= self.spriteHeight&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;if len(child.getChildren()) &gt; 0:&#10;&#9;&#9;&#9;&#9;&#9;self.buildTree(treeNode, child, level + 1)&#10;&#9;&#10;&#9;if not VR.treeRedrawEnabled:&#10;&#9;&#9;return&#10;&#9;&#10;&#9;# delete old tree&#10;&#9;if VR.visTree:&#10;&#9;&#9;VR.visTree.destroy()&#10;&#9;&#9;VR.visTree = None&#10;&#9;&#10;&#9;treeRoot = VR.Sprite(&quot;visual tree&quot;)&#10;&#9;treeRoot.setText(&quot;*&quot;)&#10;&#9;treeRoot.setSize(len(treeRoot.getText()) * .18 * .3, .3)&#10;&#9;treeRoot.setFrom(-1.9, 1.4, -3)&#10;&#9;#treeRoot.setFrom(0, 0, -3)&#10;&#9;treeRoot.setDir(0, 0, 1)&#10;&#9;tb = TreeBuilder()&#10;&#9;&#10;&#9;if VR.csgRoot:&#10;&#9;&#9;tb.buildTree(treeRoot, VR.csgRoot, 1)&#10;&#9;&#9;VR.visTree = treeRoot&#10;&#9;&#9;VR.camera.addChild(treeRoot)&#10;&#9;" type="Python" mobile=""/>
    <init core="&#9;import VR&#10;&#10;&#9;print &quot;Hint: remember setting mouse/Flystick mode in trackFlystick!&quot;&#10;&#9;print &quot;left mouse button actions:&quot;&#10;&#9;print &quot;\tj: switch move/scale mode&quot;&#10;&#9;print &quot;\tk: switch edit mode&quot;&#10;&#9;print &quot;\tl: delete&quot;&#10;&#10;&#9;VR.treeRedrawEnabled = True&#10;&#9;VR.scaleEnabled = False&#10;&#9;VR.currentlyScaling = False&#10;&#9;VR.lastBeaconDir = (0,1,0)&#10;&#9;VR.visTree = None&#10;&#9;VR.lastDragged = None&#10;&#9;VR.colorSel = (1.0, 0.9, 0.2) # selected objects&#10;&#9;VR.colorNtl = (1.0, 1.0, 1.0) # &quot;neutral&quot; objects&#10;&#9;&#10;&#9;# needed for Flystick emulation&#10;&#9;VR.clickAction = &quot;select&quot;&#10;&#10;&#9;VR.root = root_1&#10;&#9;VR.camera = camera&#10;&#9;VR.csgRoot = csgRoot&#10;&#9;VR.sampleRoot = sampleRoot&#10;&#9;VR.initScene()&#10;&#9;VR.initMenu()&#10;" type="Python" mobile="">
      <arg type="VRPyTransformType" value="Default" name_suffix="0" base_name="camera" name_space="init"/>
      <arg type="NoneType" value="csg root" name_suffix="0" base_name="csgRoot" name_space="init"/>
      <arg type="VRPyTransformType" value="Headlight" name_suffix="1" base_name="root" name_space="init"/>
      <arg type="NoneType" value="sample root" name_suffix="0" base_name="sampleRoot" name_space="init"/>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="1" base_name="trigger" name_space="__global__"/>
    </init>
    <initMenu core="&#9;import VR&#10;&#9;import math&#10;&#9;&#10;&#9;class MenuItem:&#10;&#9;&#9;&quot;&quot;&quot;&#10;&#9;&#9;Represents one menu item in a menu hierarchy.&#10;&#9;&#9;Manages it's own VR.Sprite.&#10;&#9;&#9;&quot;&quot;&quot;&#10;&#9;&#10;&#9;&#9;def __init__(self, txt, parent, isMenuRoot = False):&#10;&#9;&#9;&#9;&quot;&quot;&quot;&#10;&#9;&#9;&#9;txt: Menu item text label&#10;&#9;&#9;&#9;parent: Parent menu item (*not* scene graph parent!)&#10;&#9;&#9;&#9;isMenuRoot: determines if this item is the menu hierarchy's root&#10;&#9;&#9;&#9;TODO: don't take this explicitly, if we have a parent,&#10;&#9;&#9;&#9;&#9;we're not the menu root.&#10;&#9;&#9;&#9;&quot;&quot;&quot;&#10;&#9;&#9;&#9;self.sprite = VR.Sprite(txt)&#10;&#9;&#9;&#9;self.sprite.setText(txt)&#10;&#9;&#9;&#9;self.sprite.setSize(0.2 * len(txt), 1)&#10;&#9;&#9;&#9;self.sprite.hide()&#10;&#9;&#9;&#9;self.children = []&#10;&#9;&#9;&#9;self.menuOpen = False # Tells if our children are currently shown&#10;&#9;&#9;&#9;self.txt = txt&#10;&#9;&#9;&#9;self.parent = parent&#10;&#9;&#9;&#9;self.menuRoot = isMenuRoot&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;VR.camera.addChild(self.sprite)&#10;&#9;&#9;&#9;if parent != None:&#10;&#9;&#9;&#9;&#9;parent.children.append(self)&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;VR.menus[self.sprite.getText()] = self&#10;&#9;&#9;&#10;&#9;&#9;# Shows all our children (!) and ourselves&#10;&#9;&#9;def show(self):&#10;&#9;&#9;&#9;print self.sprite.getName(), &quot;show&quot;&#10;&#9;&#9;&#9;if VR.menuOpen:&#10;&#9;&#9;&#9;&#9;# Close any other open menu (just one at a time!)&#10;&#9;&#9;&#9;&#9;VR.menuOpen.hide()&#10;&#9;&#9;&#9;VR.menuOpen = self&#10;&#9;&#9;&#9;self.menuOpen = True&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;self.sprite.show()&#10;&#9;&#9;&#9;if self.menuRoot:&#10;&#9;&#9;&#9;&#9;self.sprite.setFrom(VR.menuPos[0],&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;VR.menuPos[1],&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;VR.menuPos[2])&#10;&#9;&#9;&#9;else:&#10;&#9;&#9;&#9;&#9;self.sprite.setFrom(self.parent.sprite.getFrom()[0],&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;self.parent.sprite.getFrom()[1],&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;self.parent.sprite.getFrom()[2])&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;# TODO Caculate dir -&gt; cam&#10;&#9;&#9;&#9;self.sprite.setDir(0, 0, -1)&#10;&#9;&#9;&#9;sectors = max(len(self.children), 1)&#10;&#9;&#9;&#9;angle = 2 * math.pi / sectors&#10;&#9;&#9;&#9;scale = 1.2&#10;&#9;&#9;&#9;ref = self.sprite.getFrom()&#10;&#9;&#9;&#9;for i, c in enumerate(self.children):&#10;&#9;&#9;&#9;&#9;c.sprite.setFrom(ref[0] + scale * math.cos(i * angle),&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;ref[1] + scale * math.sin(i * angle),&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;ref[2])&#10;&#9;&#9;&#9;&#9;c.sprite.setDir(0, 0, -1)&#10;&#9;&#9;&#9;&#9;c.sprite.show()&#10;&#9;&#9;&#10;&#9;&#9;def hide(self):&#10;&#9;&#9;&#9;print self.sprite.getName(), &quot;hide&quot;&#10;&#9;&#9;&#9;VR.menuOpen = None&#10;&#9;&#9;&#9;self.menuOpen = False&#10;&#9;&#9;&#9;self.sprite.hide()&#10;&#9;&#9;&#9;for mItem in self.children:&#10;&#9;&#9;&#9;&#9;mItem.sprite.hide()&#10;&#9;&#9;&#10;&#9;&#9;def execute(self):&#10;&#9;&#9;&#9;if self.menuRoot:&#10;&#9;&#9;&#9;&#9;if self.menuOpen:&#10;&#9;&#9;&#9;&#9;&#9;self.hide()&#10;&#9;&#9;&#9;elif len(self.children) &gt; 0:&#10;&#9;&#9;&#9;&#9;if self.menuOpen:&#10;&#9;&#9;&#9;&#9;&#9;self.hide()&#10;&#9;&#9;&#9;&#9;&#9;self.parent.show()&#10;&#9;&#9;&#9;&#9;else:&#10;&#9;&#9;&#9;&#9;&#9;self.parent.hide()&#10;&#9;&#9;&#9;&#9;&#9;self.show()&#10;&#9;&#9;&#9;&#10;&#9;&#9;&#9;if self in VR.menuFuncs.keys():&#10;&#9;&#9;&#9;&#9;VR.menuFuncs[self]()&#10;&#9;&#9;&#9;&#10;&#9;# Make class MenuItem available in module VR&#10;&#9;VR.MenuItem = MenuItem&#9;&#9;&#10;&#9;&#10;&#9;if hasattr(VR, 'menus'):&#10;&#9;&#9;for k, menuItem in VR.menus.items():&#10;&#9;&#9;&#9;menuItem.sprite.destroy()&#10;&#9;&#9;VR.menus.clear()&#10;&#9;&#9;VR.menuFuncs.clear()&#10;&#9;else:&#10;&#9;&#9;VR.menus = {}&#10;&#9;&#9;VR.menuFuncs = {}&#10;&#9;&#10;&#9;VR.menuPos = [0, 0, -3]&#10;&#9;VR.menuOpen = None&#10;&#9;&#10;&#9;mRoot = MenuItem('Menu', None, True)&#10;&#9;# Top menu layer&#10;&#9;mAxisLock = MenuItem('Axis Lock', mRoot)&#10;&#9;# Axis Lock children&#10;&#9;mOnlyX = MenuItem('X', mAxisLock)&#10;&#9;VR.menuFuncs[mOnlyX] = lambda: VR.cmdAxisLock('x')&#10;&#9;mOnlyY = MenuItem('Y', mAxisLock)&#10;&#9;VR.menuFuncs[mOnlyY] = lambda: VR.cmdAxisLock('y')&#10;&#9;mOnlyZ = MenuItem('Z', mAxisLock)&#10;&#9;VR.menuFuncs[mOnlyZ] = lambda: VR.cmdAxisLock('z')&#10;&#9;#mRoot.show()&#10;&#9;&#10;&#9;# Setup CSG op menu&#10;&#9;mRoot = MenuItem('CSG Menu', None, True)&#10;&#9;VR.menuFuncs[mRoot] = VR.cmdCsgMenuClose&#10;&#9;mUnite = MenuItem('Unite', mRoot)&#10;&#9;VR.menuFuncs[mUnite] = lambda: VR.cmdCsgOp('unite')&#10;&#9;mSubtract = MenuItem('Subtract', mRoot)&#10;&#9;VR.menuFuncs[mSubtract] = lambda: VR.cmdCsgOp('subtract')&#10;&#9;mIntersect = MenuItem('Intersect', mRoot)&#10;&#9;VR.menuFuncs[mIntersect] = lambda: VR.cmdCsgOp('intersect')&#10;&#9;&#10;&#9;# Setup mode sprite&#10;&#9;msgSpr = VR.Sprite(&quot;Mode&quot;)&#10;&#9;msgSpr.setText(&quot;select&quot;)&#10;&#9;msgSpr.setSize(0.2 * len(&quot;select&quot;), 1)&#10;&#9;msgSpr.setFrom(2, 1, -3)&#10;&#9;at = VR.camera.getDir()&#10;&#9;msgSpr.setDir(at[0], at[1], at[2])&#10;&#9;VR.modeSpr = msgSpr&#10;&#9;VR.camera.addChild(msgSpr)&#10;&#9;" type="Python" mobile=""/>
    <initScene core="&#9;import VR&#10;&#9;&#10;&#9;VR.selectedObjects = []&#10;&#9;&#10;&#9;# Check if primitive roots already exist.&#10;&#9;# This &quot;fails&quot; if there's a node &quot;row root.2&quot;,&#10;&#9;# but that in turn only exists if humans messed&#10;&#9;# things up :)&#10;&#9;oldRowRoot = VR.sampleRoot&#10;&#9;if oldRowRoot:&#10;&#9;&#9;oldRowRoot.destroy()&#10;&#9;&#9;&#10;&#9;oldCsgRoot = VR.csgRoot&#10;&#9;if oldCsgRoot:&#10;&#9;&#9;oldCsgRoot.destroy()&#10;&#9;&#10;&#9;csgRoot = VR.Transform(&quot;csg root&quot;)&#10;&#9;csgRoot.setFrom(.6, 1.8, -.7) # TODO same as rowRoot&#10;&#9;csgRoot.setFrom(0,0,0)&#10;&#9;csgRoot.setDir(0, 0, -1)&#10;&#9;VR.root.addChild(csgRoot)&#10;&#9;VR.csgRoot = csgRoot&#10;&#9;&#10;&#9;# TODO&#10;&#9;# Couldn't figure out a way to implement&#10;&#9;# Geometry.setMesh nicely yet.&#10;&#9;# -&gt; VR.loadCollada from vrpSS14 branch&#10;&#9;&#10;&#9;# create primitive row parent&#10;&#9;sampleRoot = VR.Transform(&quot;sample root&quot;)&#10;&#9;sampleRoot.setFrom(.6, 1.8, -.7)&#10;&#9;sampleRoot.setDir(0, 0, -1)&#10;&#9;VR.root.addChild(sampleRoot)&#10;&#9;VR.sampleRoot = sampleRoot&#10;&#9;&#10;&#9;# place sample primitives&#10;&#9;VR.samplePrims = {}&#10;&#9;sphere = VR.createSample(&quot;sphere&quot;)&#10;&#9;VR.samplePrims[sphere.getName()] = sphere&#10;&#9;cube = VR.createSample(&quot;cube&quot;)&#10;&#9;VR.samplePrims[cube.getName()] = cube&#10;&#9;cylinder = VR.createSample(&quot;cylinder&quot;)&#10;&#9;VR.samplePrims[cylinder.getName()] = cylinder&#10;&#9;torus = VR.createSample(&quot;torus&quot;)&#10;&#9;VR.samplePrims[torus.getName()] = torus&#10;&#9;" type="Python" mobile=""/>
    <keyDelete core="&#9;import VR&#10;&#9;&#10;&#9;VR.clickAction = &quot;delete&quot;&#10;&#9;print &quot;click action:&quot;, VR.clickAction&#10;&#9;VR.modeSpr.setText(VR.clickAction)&#10;&#9;VR.modeSpr.setSize(0.2 * len(VR.clickAction), 1)" type="Python" mobile="">
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="108" name_suffix="14" base_name="trigger" name_space="__global__"/>
    </keyDelete>
    <keySelect core="&#9;import VR&#10;&#9;&#10;&#9;VR.clickAction = &quot;select&quot;&#10;&#9;print &quot;click action:&quot;, VR.clickAction&#10;&#9;VR.cmdSwitchMoveScale(None, dev)&#10;" type="Python" mobile="">
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="106" name_suffix="13" base_name="trigger" name_space="__global__"/>
    </keySelect>
    <keySwitchEditMode core="&#9;import VR&#10;&#9;&#10;&#9;VR.clickAction = &quot;switchEditMode&quot;&#10;&#9;print &quot;click action:&quot;, VR.clickAction&#10;&#9;VR.modeSpr.setText(VR.clickAction)&#10;&#9;VR.modeSpr.setSize(0.2 * len(VR.clickAction), 1)&#10;" type="Python" mobile="">
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="107" name_suffix="8" base_name="trigger" name_space="__global__"/>
    </keySwitchEditMode>
    <showNotification core="&#9;if not msg:&#10;&#9;&#9;return&#10;&#9;&#10;&#9;import VR&#10;&#9;from threading import Timer&#10;&#9;&#10;&#9;def hideNotification():&#10;&#9;&#9;VR.notification.destroy()&#10;&#9;&#10;&#9;msgSpr = VR.Sprite(&quot;notification&quot;)&#10;&#9;msgSpr.setText(msg)&#10;&#9;msgSpr.setSize(0.2 * len(msg), 1)&#10;&#9;msgSpr.setFrom(0, 0, -3)&#10;&#9;at = VR.camera.getDir()&#10;&#9;msgSpr.setDir(at[0], at[1], at[2])&#10;&#9;VR.notification = msgSpr&#10;&#9;VR.camera.addChild(msgSpr)&#10;&#9;&#10;&#9;# When the timer finishes, PolyVR crashes reproducibly.&#10;&#9;#Timer(1.0, hideNotification).start()&#10;&#9;msgSpr.destroy()&#10;&#9;" type="Python" mobile="">
      <arg type="str" value="0" name_suffix="0" base_name="msg" name_space="showNotification"/>
    </showNotification>
    <startDragTimer core="&#9;import VR&#10;&#9;from datetime import datetime&#10;&#9;&#10;&#9;VR.dragStart = datetime.now()&#10;&#9;" type="Python" mobile=""/>
    <stopDragTimer core="&#9;import VR&#10;&#9;from datetime import datetime, timedelta&#10;&#9;&#10;&#9;dragStop = datetime.now()&#10;&#9;clickTimeout = VR.dragStart + timedelta(microseconds=200000)&#10;&#9;return dragStop &gt; clickTimeout&#10;&#9;" type="Python" mobile=""/>
    <test core="&#9;import VR&#10;&#9;&#10;&#9;# triggers crash!&#10;&#9;#spr = VR.Sprite(&quot;blub&quot;)&#10;&#9;#spr.setText(&quot;blub&quot;)&#10;&#9;&#10;&#9;mat = obj.getMaterial()&#10;&#9;#mat = VR.Material(&quot;selected&quot;)&#10;&#9;print mat.getDiffuse()&#10;&#9;mat.setDiffuse(1,1,0)&#10;&#9;print mat.getDiffuse()&#10;&#9;obj.setMaterial(mat)&#10;&#9;" type="Python" mobile="">
      <arg type="VRPyGeometryType" value="cube" name_suffix="0" base_name="obj" name_space="test"/>
      <trig type="on_device" dev="mouse" state="pressed" param="" key="5" name_suffix="0" base_name="trigger" name_space="__global__"/>
    </test>
    <trackFlystick core="&#9;import VR&#10;&#9;from math import isnan&#9;&#10;&#9;&#10;&#9;def subtract(a, b):&#10;&#9;&#9;&quot;&quot;&quot;&#10;&#9;&#9;Subtracts vector b from vector a&#10;&#9;&#9;&quot;&quot;&quot;&#10;&#9;&#9;try:&#10;&#9;&#9;&#9;return [a[0] - b[0],&#10;&#9;&#9;&#9;&#9;&#9;a[1] - b[1],&#10;&#9;&#9;&#9;&#9;&#9;a[2] - b[2]]&#10;&#9;&#9;except:&#10;&#9;&#9;&#9;raise ValueError(&quot;subtract expects two 3-dimensional vectors.&quot;)&#10;&#9;&#10;&#9;# Switch between mouse and Flystick mode. The former tracks the rotational&#10;&#9;# motion of the mouse beacon, the latter relies on the translational&#10;&#9;# motion. This is due to the fact that the mouse beacon never translates,&#10;&#9;# but translation is more convenient when using the Flystick in VR.&#10;&#9;mouseMode = True&#10;&#9;&#10;&#9;if not VR.currentlyScaling:&#10;&#9;&#9;VR.lastBeaconDir = beacon.getDir()&#10;&#9;&#9;return&#10;&#9;&#10;&#9;if mouseMode:&#10;&#9;&#9;beaconDir = beacon.getDir()&#10;&#9;&#9;diff = subtract(beacon.getDir(), VR.lastBeaconDir)&#10;&#9;&#9;mouseDeltaMvmt = diff[0]&#10;&#9;&#9;VR.lastBeaconDir = beaconDir&#10;&#9;&#9;&#10;&#9;&#9;# Enough computation, scale something!&#10;&#9;&#9;oldScale = VR.lastDragged.getScale()&#10;&#9;&#9;print oldScale[0] + mouseDeltaMvmt&#10;&#9;&#9;VR.lastDragged.setScale(oldScale[0] + mouseDeltaMvmt,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;oldScale[0] + mouseDeltaMvmt,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;oldScale[0] + mouseDeltaMvmt)&#10;&#9;else:&#10;&#9;&#9;pass # TODO&#10;" type="Python" mobile="">
      <arg type="VRPyTransformType" value="mouse_beacon" name_suffix="0" base_name="beacon" name_space="trackFlystick"/>
      <trig type="on_timeout" dev="" state="Pressed" param="50" key="0" name_suffix="12" base_name="trigger" name_space="__global__"/>
    </trackFlystick>
    <triggerDown core="&#9;import VR&#10;&#9;&#10;&#9;if dev_1:&#10;&#9;&#9;dev = dev_1&#10;&#9;&#10;&#9;VR.startDragTimer()&#10;&#9;VR.treeRedrawEnabled = False&#10;&#9;target = dev.getDragged()&#10;&#9;if target == None:&#10;&#9;&#9;return&#10;&#9;VR.lastDragged = target&#10;&#9;&#9;&#10;&#9;targetName = target.getName().split(&quot;.&quot;)[0]&#10;&#9;print &quot;down:&quot;, target.getName()&#10;&#9;&#10;&#9;if VR.scaleEnabled:&#10;&#9;&#9;# keep track of where the flystick moves, we need to scale&#10;&#9;&#9;VR.currentlyScaling = True&#10;&#9;elif targetName in VR.samplePrims.keys():&#10;&#9;&#9;# Sample primitive was grabbed&#10;&#9;&#9;picked = VR.samplePrims[targetName]&#10;&#9;&#9;primitiveType = targetName.split(&quot; &quot;)[1]&#10;&#9;&#9;target.setName(primitiveType)&#10;&#9;&#9;&#10;&#9;&#9;# create a new instance for the sample row&#10;&#9;&#9;newSample = VR.createSample(primitiveType)&#10;&#9;&#9;if newSample is not None:&#10;&#9;&#9;&#9;VR.samplePrims[&quot;sample &quot; + primitiveType] = newSample&#10;&#9;&#9;" type="Python" mobile="">
      <trig type="on_device" dev="mouse" state="Pressed" param="" key="0" name_suffix="15" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="flystick" state="Pressed" param="" key="0" name_suffix="6" base_name="trigger" name_space="__global__"/>
    </triggerDown>
    <triggerUp core="&#9;import VR&#10;&#10;&#9;def finish():&#10;&#9;&#9;&quot;&quot;&quot; Cleanup actions that need to be done *always* &quot;&quot;&quot;&#10;&#9;&#9;VR.treeRedrawEnabled = True&#10;&#10;&#9;isDrag = VR.stopDragTimer()&#10;&#9;#print &quot;CLICK:&quot;, clickDevice.getName(), &quot;clicked with&quot;, clickDevice.getButton(0)&#10;&#9;dragged = VR.lastDragged&#10;&#9;intersected = dev.getIntersected()&#10;&#9;if not intersected:&#10;&#9;&#9;intersected = dev.getIntersected()&#10;&#9;if not dragged and not intersected:&#10;&#9;&#9;finish()&#10;&#9;&#9;return&#10;&#9;&#10;&#9;# Cases:&#10;&#9;# Nothing dragged/single click -&gt; intr + isDrag (true/false)&#10;&#9;# Object dragged -&gt; dragged + isDrag (true)&#10;&#9;&#10;&#9;if dragged:&#10;&#9;&#9;print &quot;drag up:&quot;, dragged.getName(), &quot;drag:&quot;, isDrag&#10;&#9;if intersected:&#10;&#9;&#9;print &quot;intr up:&quot;, intersected.getName(), &quot;drag:&quot;, isDrag&#10;&#9;&#10;&#9;if VR.scaleEnabled:&#10;&#9;&#9;VR.currentlyScaling = False&#10;&#9;if isDrag and dragged:&#10;&#9;&#9;# Actual DnD operation&#10;&#9;&#9;if dragged.getParent().getName() == &quot;sample root&quot;:&#10;&#9;&#9;&#9;print &quot;Reparenting...&quot;&#10;&#9;&#9;&#9;worldPos = dragged.getWorldFrom()&#10;&#9;&#9;&#9;dragDir = dragged.getDir()&#10;&#9;&#9;&#9;rootPos = VR.csgRoot.getFrom()&#10;&#9;&#9;&#9;newPos = [worldPos[0] - rootPos[0],&#10;&#9;&#9;&#9;&#9;&#9;worldPos[1] - rootPos[1],&#10;&#9;&#9;&#9;&#9;&#9;worldPos[2] - rootPos[2]]&#10;&#9;&#9;&#9;dragged.switchParent(VR.csgRoot)&#10;&#9;&#9;&#9;dragged.setFrom(newPos[0], newPos[1], newPos[2])&#10;&#9;&#9;&#9;dragged.setDir(dragDir[0], dragDir[1], dragDir[2])&#10;&#9;&#9;finish()&#10;&#9;&#9;return&#10;&#10;&#9;# Ignore drag stuff, this is an ordinary click&#10;&#9;if intersected:&#10;&#9;&#9;try:&#10;&#9;&#9;&#9;if intersected.getText() in VR.menus.keys():&#10;&#9;&#9;&#9;&#9;# A menu item was clicked&#10;&#9;&#9;&#9;&#9;#print VR.menus[target.getName()], VR.menus[target.getName()].execute&#10;&#9;&#9;&#9;&#9;VR.menus[intersected.getText()].execute()&#10;&#9;&#9;&#9;&#9;#VR.menus['CSG Menu'].hide() # done elsewhere&#10;&#9;&#9;&#9;&#9;VR.selectedObjects = []&#10;&#9;&#9;except:&#10;&#9;&#9;&#9;# something non-menu was clicked&#10;&#9;&#9;&#9;if intersected.isPickable():&#10;&#9;&#9;&#9;&#9;if VR.clickAction == &quot;select&quot;:&#10;&#9;&#9;&#9;&#9;&#9;if (not intersected.getName().split(&quot; &quot;)[0] == &quot;sample&quot; and&#10;&#9;&#9;&#9;&#9;&#9;not intersected in VR.selectedObjects):&#10;&#9;&#9;&#9;&#9;&#9;&#9;VR.cmdSelect(dev)&#10;&#9;&#9;&#9;&#9;elif VR.clickAction == &quot;switchEditMode&quot;:&#10;&#9;&#9;&#9;&#9;&#9;VR.cmdSwitchEditMode(dev)&#10;&#9;&#9;&#9;&#9;elif VR.clickAction == &quot;delete&quot;:&#10;&#9;&#9;&#9;&#9;&#9;VR.cmdDelete(dev)&#10;&#9;finish()&#10;" type="Python" mobile="">
      <trig type="on_device" dev="mouse" state="Released" param="" key="0" name_suffix="16" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="flystick" state="Released" param="" key="0" name_suffix="7" base_name="trigger" name_space="__global__"/>
    </triggerUp>
  </Scripts>
  <Sockets/>
  <Background color="0.6 0.6 0.6" path="data/common/skybox/sky/Sky" type="2"/>
</Scene>
