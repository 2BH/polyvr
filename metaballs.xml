<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="metaballs" name_space="Scene">
  <Objects>
    <Object name_suffix="0" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="0.583143 2.59138 2.95557" at="0.165613 0.994911 0" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="0" accept_root="1" near="0.1" far="250" aspect="1" fov="1.0472">
          <Object name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering frustum_culling="1" occlusion_culling="0" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="frag" name_space="__script__" type="GLSL" mobile="">
      <core>
#version 120
in vec2 texCoord;

void main( void ) {
	vec2 p = 2* ( vec2(0.5, 0.5) - texCoord );
	float r = sqrt(dot(p,p));
	if (r &gt; 1.0) discard;
	
	//float f = 1.2 - (1.0-sqrt(1.0-r))/(r);
	float f = 1.0-r;
	//float f = 1.0 - (1.0-sqrt(fr))/(r);
	
	gl_FragColor = vec4(0,0,1,0.5);
}
</core>
    </Script>
    <Script name_suffix="0" base_name="frag2" name_space="__script__" type="GLSL" mobile="">
      <core>
#version 120
//in vec2 texCoord;

uniform sampler2D tex0;

void main( void ) {
	//vec2 p = 2* ( vec2(0.5, 0.5) - texCoord );
	//float r = sqrt(dot(p,p));
	//if (r &gt; 1.0) discard;

	vec4 data = texture2D(tex0, gl_TexCoord[0].xy);
	float r = data.r;
	float f = 0.2 + r;
	if (r &lt; 0.2) gl_FragColor = vec4(0,0,0.5, 1.0-(0.2-r)/0.2);
	else gl_FragColor = vec4(f,f,f, 1.0-r);
}
</core>
    </Script>
    <Script name_suffix="0" base_name="geo" name_space="__script__" type="GLSL" mobile="">
      <core>
#version 150
#extension GL_EXT_geometry_shader4 : enable
layout (points) in;
layout (triangle_strip, max_vertices=6) out;

uniform vec2 OSGViewportSize;

in vec4 color[];
in vec3 normal[];
out vec2 texCoord;

void emitVertex(in vec4 p, in vec2 tc) {
	gl_Position = p;
	texCoord = tc;
	EmitVertex();
}

void emitQuad(in float s, in vec4 tc) {
	vec4 p = gl_PositionIn[0];

	float a = OSGViewportSize.y/OSGViewportSize.x;

	vec4 u = vec4(s*a,0,0,0);
	vec4 v = vec4(0,s,0,0);

	vec4 p1 = p -u -v;
	vec4 p2 = p -u +v;
	vec4 p3 = p +u +v;
	vec4 p4 = p +u -v;

	emitVertex(p1, vec2(tc[0], tc[2]));
	emitVertex(p2, vec2(tc[0], tc[3]));
	emitVertex(p3, vec2(tc[1], tc[3]));
	EndPrimitive();
	emitVertex(p1, vec2(tc[0], tc[2]));
	emitVertex(p3, vec2(tc[1], tc[3]));
	emitVertex(p4, vec2(tc[1], tc[2]));
	EndPrimitive();
}

void main() {
	emitQuad(normal[0][1], vec4(0,1,0,1));
}
</core>
    </Script>
    <Script name_suffix="0" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	pS = 0.3
	
	r = VR.getRoot().find('Headlight')
	if hasattr(VR, 'balls'): VR.balls.destroy()
	VR.balls = VR.Geometry('balls')
	VR.balls.setType('GL_POINTS')
	VR.balls.setPositions([[0,0,0], [0.2,0.2,0]])
	VR.balls.setNormals([[0,pS,0], [0,pS,0]])
	VR.balls.setIndices([0,1])
	r.addChild(VR.balls)
	
	m = VR.Material('balls')
	m.setPointSize(10)
	#m.setDefaultVertexShader()
	m.setVertexProgram('vert')
	m.setGeometryProgram('geo')
	m.setFragmentProgram('frag')
	m.setTransparency(1.0)
	VR.balls.setMaterial(m)
	
	if hasattr(VR, 'screen'): VR.screen.destroy()
	VR.screen = VR.Geometry('screen')
	VR.screen.setPrimitive('Plane 1.5 1 1 1')
	VR.screen.translate(0,1,0)
	r.addChild(VR.screen)
	
	m2 = VR.Material('balls_b')
	m2.setTexture('metaballs_buffer.png')
	m2.setDefaultVertexShader()
	m2.setFragmentProgram('frag2')
	m2.setTransparency(1.0)
	VR.screen.setMaterial(m2)
	
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="0" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="vert" name_space="__script__" type="GLSL" mobile="">
      <core>
#version 120

varying vec4 color;
varying vec3 normal;

attribute vec4 osg_Vertex;
attribute vec4 osg_Normal;
attribute vec4 osg_Color;

void main( void ) {
    color = osg_Color;
    normal = osg_Normal.xyz;
    gl_Position = gl_ModelViewProjectionMatrix*osg_Vertex;
}
</core>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="1 0.528115 0.528115" path="" type="0"/>
  <Navigation active="Orbit"/>
  <Materials/>
</Scene>
