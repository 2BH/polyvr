<?xml version="1.0" encoding="UTF-8"?>
<Scene name_suffix="0" base_name="cylindertest" name_space="Scene">
  <Objects>
    <Object name_suffix="1" base_name="Root" name_space="__global__" type="Object" pickable="0" visible="1">
      <Object name_suffix="0" base_name="Headlight" name_space="__global__" type="Light" pickable="0" visible="1" ambient="0.3 0.3 0.3 1" beacon="Headlight_beacon" diffuse="1 1 1 1" lightType="point" on="1" shadow="0" shadowColor="0.1 0.1 0.1 1" shadowType="4096" specular="0.1 0.1 0.1 1">
        <Object name_suffix="0" base_name="Default" name_space="__global__" type="Camera" pickable="0" visible="1" from="1.78155 4.56587 4.7323" at="0.4171 1.04566 1.1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="0" accept_root="1" near="0.1" far="250" aspect="1" fov="1.0472">
          <Object name_suffix="0" base_name="Headlight_beacon" name_space="__global__" type="LightBeacon" pickable="0" visible="1" from="0 0 0" at="0 0 -1" up="0 1 0" scale="1 1 1" cT="0 1 0" cR="0 0 0" do_cT="0" do_cR="0" cT_mode="1" at_dir="1" light="Headlight"/>
        </Object>
      </Object>
    </Object>
  </Objects>
  <Rendering deferred_rendering="0" frustum_culling="1" occlusion_culling="0" ssao="0" ssao_kernel="4" ssao_noise="4" ssao_radius="0.02" two_sided="1"/>
  <Scripts>
    <Script name_suffix="0" base_name="doBasin" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	def doTransparent():
		#transparent/invisible material
		mat = VR.Material('glass')
		mat.setTransparency(0)
		return mat
		
	def doColor(r,g,b):
		mat = VR.Material('color')
		mat.setDiffuse([r,g,b])
		mat.setAmbient([r,g,b])
		return mat
		
	def doLittleCube():
		cube = VR.Geometry('lilCube')
		cube.setPrimitive("Box 0.01 0.01 0.01 1 1 1")
		parent.addChild(cube)
		return cube
		
	(x,y,z) = ("4","0.2","2")
	(nx,ny,nz) = (2,0.1,1) #as integer, halved
	VR.basin = []
	
	#---do ground---#
	ground = VR.Geometry('Ground')
	ground.setPrimitive("Box "+x+" "+y+" "+z+" 1 1 1")
	ground.setCollisionMargin(0.5)
	ground.physicalize(1,0,0)
	ground.setMaterial(doColor(0.8,0.8,0.9))
	parent.addChild(ground)
	ground.setCollisionGroup(2) # gruppe 1
	ground.setCollisionMask(1) # kollidiert mit boden, gruppe 2
	VR.basin.append(ground)
	
	
	#---do walls----#
	wall1 = VR.Geometry('Wall1')
	wall2 = VR.Geometry('Wall2')
	wallA = VR.Geometry('WallA')
	wallB = VR.Geometry('WallB')
	# set form
	wall1.setPrimitive("Box "+y+" "+z+" "+z+" 1 1 1")
	wall2.setPrimitive("Box "+y+" "+z+" "+z+" 1 1 1")
	wallA.setPrimitive("Box "+x+" "+z+" "+y+" 1 1 1")
	wallB.setPrimitive("Box "+x+" "+z+" "+y+" 1 1 1")
	# move to position
	wall1.translate(-nx,nz,0)	
	wall2.translate( nx,nz,0)
	wallA.translate(0,nz, nz)
	wallB.translate(0,nz,-nz)
	
	walls = [wall1, wall2, wallA, wallB]
	for wall in walls:
		wall.setMaterial(doTransparent())
		wall.setCollisionMargin(0.1)
		wall.physicalize(1,0,0)
		parent.addChild(wall)
		VR.basin.append(wall)
	#------------------#
	
	
	#---do cylinder---#
	cylinder = VR.Geometry('cylinder')
	cylinder.setPrimitive("Cone "+z+" 1 4")
	cylinder.translate(-0.2,0.2,0)
	cylinder.setCollisionMargin(0.01)
	cylinder.physicalize(1,0,0)
	cylinder.setMaterial(doColor(0.8,0.8,0.9))
	parent.addChild(cylinder)
	VR.basin.append(cylinder)
	# do path
	path = VR.Path('cyl_path')
	path.set([-nz,nz,0], [1,0,0], [nz,nz,0], [1,0,0], 1)
	# animate cylinder
	pathtool = VR.Pathtool('pathtool')
	pathtool.setVisible(False)
	pathtool.setHandleGeometry(doLittleCube())
	pathtool.addPath(path, VR.getRoot())
	n = pathtool.extrude(None, path)
	n.setPose([-nz,nz,0], [1,0,0], [0,1,0])
	pathtool.update()
	cylinder.animate(path, 2, 0,0,1)
	
	# let them collide with water
	for o in VR.basin:
		o.setCollisionGroup(0) # 0001 = BIT(0)
		o.setCollisionMask(1) #  0010 = BIT(1)
	
	return cylinder
</core>
      <arg type="VRPyObjectType" value="0" name_suffix="0" base_name="parent" name_space="doBasin"/>
    </Script>
    <Script name_suffix="0" base_name="doFluids" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	def doMaterial():
		m = VR.Material('fluid')
		m.setLit(0)
		#m.setVertexProgram('fluid_vp')
		#m.setFragmentProgram('fluid_fp')
		m.setPointSize(10)
		m.setAmbient([0.2,0.2,1])
		return m
	
	fluid = VR.Fluids()
	#fluid.setAmount(800)
	fluid.setMaterial( doMaterial() )
	fluid.setRadius(radius)
	fluid.setMass(mass)
	fluid.setSphRadius(sphRadius)
	fluid.setViscosity(0.001)
	#VR.fluid.setSimType('SPH')
	num = fluid.spawnCuboid(-1,5,-0.4, 4*sphRadius, 3,800,2)
	print num
	#fluid.spawnEmitter([0,5,-0.4],[0,-0.001,0],0,400,20)
	
	parent.addChild(fluid)
	return fluid

</core>
      <arg type="float" value="0" name_suffix="0" base_name="mass" name_space="doFluids"/>
      <arg type="VRPyObjectType" value="0" name_suffix="0" base_name="parent" name_space="doFluids"/>
      <arg type="float" value="0" name_suffix="0" base_name="radius" name_space="doFluids"/>
      <arg type="float" value="0" name_suffix="0" base_name="sphRadius" name_space="doFluids"/>
    </Script>
    <Script name_suffix="0" base_name="doParticles" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	def doMaterial():
		m = VR.Material('fluid')
		#m.setVertexProgram('fluid_vp')
		#m.setFragmentProgram('fluid_fp')
		m.setPointSize(10)
		m.setDiffuse([1,0.5,0.5])
		m.setAmbient([1,0.5,0.5])
		return m
	
	fluid = VR.Particles()
	fluid.setMaterial( doMaterial() )
	fluid.setRadius(radius, 0.0)
	fluid.setMassForOneLiter(mass)
	#fluid.setSphRadius(sphRadius, 0.0)
	num = fluid.spawnCuboid(0,0.1,0, 2*radius, 0.5,20,0.5)
	print num
	parent.addChild(fluid)
	return fluid
</core>
      <arg type="float" value="0" name_suffix="0" base_name="mass" name_space="doParticles"/>
      <arg type="VRPyObjectType" value="0" name_suffix="0" base_name="parent" name_space="doParticles"/>
      <arg type="float" value="0" name_suffix="0" base_name="radius" name_space="doParticles"/>
      <arg type="float" value="0" name_suffix="0" base_name="sphRadius" name_space="doParticles"/>
    </Script>
    <Script name_suffix="0" base_name="init" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	import time
	import math
	
	#---reset scene---#
	r = VR.getRoot().find('Headlight')
	if hasattr(VR, 'test'):
		print 'destroy'
		VR.test.destroy()
	VR.test = VR.Object('test')
	r.addChild(VR.test)
	#-----------------#
	
	#---build scene---#
	VR.cylinder = VR.doBasin(VR.test)
	#-----------------#

	#---do fluids---#
	R = 0.05 # meter radius
	V = 4/3*math.pi*R*R*R # Volumen pro partikel
	rho = 1000 # kg f√ºr einen m^3 fluid
	m = V*rho
	
	(mass, parent, radius, sphRadius) = (m, VR.test, R, 5*R)
	VR.fluid = VR.doFluids(mass, parent, radius, sphRadius)
	#VR.particles = VR.doParticles(mass, parent, radius, sphRadius)
	VR.play = True;
	#---------------#i
</core>
      <trig type="on_scene_load" dev="" state="Pressed" param="" key="0" name_suffix="0" base_name="trigger" name_space="__global__"/>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="105" name_suffix="1" base_name="trigger" name_space="__global__"/>
    </Script>
    <Script name_suffix="0" base_name="playPause" name_space="__script__" type="Python" mobile="">
      <core>
	import VR
	
	if VR.play == True:
		VR.cylinder.animationStop()
		VR.play = False
	else:
		print "not implemented yet"
		

</core>
      <trig type="on_device" dev="keyboard" state="Pressed" param="" key="112" name_suffix="2" base_name="trigger" name_space="__global__"/>
    </Script>
  </Scripts>
  <Sockets/>
  <Background color="0.6 0.6 0.6" format=".png" path="" type="0"/>
  <Navigation active="Orbit"/>
  <Materials/>
</Scene>
